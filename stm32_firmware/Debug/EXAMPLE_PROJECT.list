
EXAMPLE_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b60  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004c20  08004c20  00005c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d38  08004d38  0000606c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d38  08004d38  0000606c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d38  08004d38  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d38  08004d38  00005d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d3c  08004d3c  00005d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004d40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000070  08004dac  00006070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08004dac  0000636c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebc4  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256b  00000000  00000000  00014c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  000171c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b81  00000000  00000000  00018078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d9f  00000000  00000000  00018bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011afd  00000000  00000000  0002a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a28d  00000000  00000000  0003c495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e58  00000000  00000000  000a6768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000aa5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c08 	.word	0x08004c08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004c08 	.word	0x08004c08

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1824      	adds	r4, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	42a3      	cmp	r3, r4
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0424      	lsls	r4, r4, #16
 8000456:	1960      	adds	r0, r4, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <Save_To_Flash>:
* @brief - This function saves uint32_t data in a specific address
* @param -
***********************************************************************
*/
void Save_To_Flash(uint32_t address, void *data, uint16_t size)
{
 8000464:	b5b0      	push	{r4, r5, r7, lr}
 8000466:	b08a      	sub	sp, #40	@ 0x28
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	1dbb      	adds	r3, r7, #6
 8000470:	801a      	strh	r2, [r3, #0]
    HAL_FLASH_Unlock();  // Unlock Flash for writing
 8000472:	f001 fc47 	bl	8001d04 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError;

    // Erase Flash page before writing (only when writing first variable)
    if (address == FLASH_USER_START_ADDR)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	4a26      	ldr	r2, [pc, #152]	@ (8000514 <Save_To_Flash+0xb0>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d115      	bne.n	80004aa <Save_To_Flash+0x46>
    {
        EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800047e:	2114      	movs	r1, #20
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
        EraseInitStruct.PageAddress = FLASH_USER_START_ADDR;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	4a22      	ldr	r2, [pc, #136]	@ (8000514 <Save_To_Flash+0xb0>)
 800048a:	605a      	str	r2, [r3, #4]
        EraseInitStruct.NbPages = 1;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2201      	movs	r2, #1
 8000490:	609a      	str	r2, [r3, #8]

        if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8000492:	2310      	movs	r3, #16
 8000494:	18fa      	adds	r2, r7, r3
 8000496:	187b      	adds	r3, r7, r1
 8000498:	0011      	movs	r1, r2
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fcf2 	bl	8001e84 <HAL_FLASHEx_Erase>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d002      	beq.n	80004aa <Save_To_Flash+0x46>
        {
            HAL_FLASH_Lock();
 80004a4:	f001 fc54 	bl	8001d50 <HAL_FLASH_Lock>
            return;  // Handle error
 80004a8:	e031      	b.n	800050e <Save_To_Flash+0xaa>
        }
    }

    // Write 16-bit values
    uint16_t *data16 = (uint16_t *)data;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	623b      	str	r3, [r7, #32]
    for (uint16_t i = 0; i < size / 2; i++)
 80004ae:	2326      	movs	r3, #38	@ 0x26
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	801a      	strh	r2, [r3, #0]
 80004b6:	e01f      	b.n	80004f8 <Save_To_Flash+0x94>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + (i * 2), data16[i]) != HAL_OK)
 80004b8:	2026      	movs	r0, #38	@ 0x26
 80004ba:	183b      	adds	r3, r7, r0
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	001a      	movs	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	18d1      	adds	r1, r2, r3
 80004c6:	183b      	adds	r3, r7, r0
 80004c8:	881b      	ldrh	r3, [r3, #0]
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	6a3a      	ldr	r2, [r7, #32]
 80004ce:	18d3      	adds	r3, r2, r3
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	001c      	movs	r4, r3
 80004d4:	2300      	movs	r3, #0
 80004d6:	001d      	movs	r5, r3
 80004d8:	0022      	movs	r2, r4
 80004da:	002b      	movs	r3, r5
 80004dc:	2001      	movs	r0, #1
 80004de:	f001 fb7b 	bl	8001bd8 <HAL_FLASH_Program>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d002      	beq.n	80004ec <Save_To_Flash+0x88>
        {
            HAL_FLASH_Lock();
 80004e6:	f001 fc33 	bl	8001d50 <HAL_FLASH_Lock>
            return;  // Handle error
 80004ea:	e010      	b.n	800050e <Save_To_Flash+0xaa>
    for (uint16_t i = 0; i < size / 2; i++)
 80004ec:	2126      	movs	r1, #38	@ 0x26
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	881a      	ldrh	r2, [r3, #0]
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	3201      	adds	r2, #1
 80004f6:	801a      	strh	r2, [r3, #0]
 80004f8:	1dbb      	adds	r3, r7, #6
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	085b      	lsrs	r3, r3, #1
 80004fe:	b29b      	uxth	r3, r3
 8000500:	2226      	movs	r2, #38	@ 0x26
 8000502:	18ba      	adds	r2, r7, r2
 8000504:	8812      	ldrh	r2, [r2, #0]
 8000506:	429a      	cmp	r2, r3
 8000508:	d3d6      	bcc.n	80004b8 <Save_To_Flash+0x54>
        }
    }

    HAL_FLASH_Lock();  // Lock Flash after writing
 800050a:	f001 fc21 	bl	8001d50 <HAL_FLASH_Lock>
}
 800050e:	46bd      	mov	sp, r7
 8000510:	b00a      	add	sp, #40	@ 0x28
 8000512:	bdb0      	pop	{r4, r5, r7, pc}
 8000514:	0800fc00 	.word	0x0800fc00

08000518 <Read_From_Flash>:
* @brief - This function returns the variable stored
* @param -
***********************************************************************
*/
uint32_t Read_From_Flash(uint32_t address)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    return *(volatile uint32_t*)address;  // Read 32-bit data from Flash
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fca0 	bl	8000e74 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f8ac 	bl	8000690 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 fa04 	bl	8000944 <MX_GPIO_Init>
  MX_DMA_Init();
 800053c:	f000 f9e4 	bl	8000908 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f9b2 	bl	80008a8 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000544:	f000 f8e4 	bl	8000710 <MX_ADC_Init>
  MX_TIM3_Init();
 8000548:	f000 f958 	bl	80007fc <MX_TIM3_Init>
  HAL_TIM_Base_Start_IT(&htim3);  // Start TIM3 interrupt
 800054c:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <main+0x64>)
 800054e:	0018      	movs	r0, r3
 8000550:	f002 fb9a 	bl	8002c88 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_values, 3);
 8000554:	490f      	ldr	r1, [pc, #60]	@ (8000594 <main+0x68>)
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <main+0x6c>)
 8000558:	2203      	movs	r2, #3
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fe2e 	bl	80011bc <HAL_ADC_Start_DMA>

  generate_Serial_Num();
 8000560:	f000 f854 	bl	800060c <generate_Serial_Num>
  saved_serial = Read_From_Flash(FLASH_USER_START_ADDR);
 8000564:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <main+0x70>)
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff ffd6 	bl	8000518 <Read_From_Flash>
 800056c:	0002      	movs	r2, r0
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <main+0x74>)
 8000570:	601a      	str	r2, [r3, #0]
  // Read data from Flash
  while (1){
	  if (serialNumber == saved_serial){
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <main+0x78>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <main+0x74>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	429a      	cmp	r2, r3
 800057c:	d103      	bne.n	8000586 <main+0x5a>
		  delay_value = 250;
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <main+0x7c>)
 8000580:	22fa      	movs	r2, #250	@ 0xfa
 8000582:	801a      	strh	r2, [r3, #0]
 8000584:	e7f5      	b.n	8000572 <main+0x46>
	  }
	  else{
		  delay_value = 1000;
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <main+0x7c>)
 8000588:	22fa      	movs	r2, #250	@ 0xfa
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	801a      	strh	r2, [r3, #0]
	  if (serialNumber == saved_serial){
 800058e:	e7f0      	b.n	8000572 <main+0x46>
 8000590:	20000110 	.word	0x20000110
 8000594:	200001e0 	.word	0x200001e0
 8000598:	2000008c 	.word	0x2000008c
 800059c:	0800fc00 	.word	0x0800fc00
 80005a0:	200001f4 	.word	0x200001f4
 80005a4:	200001f0 	.word	0x200001f0
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_TIM_PeriodElapsedCallback>:
	  }
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)  // Check if TIM3 triggered the interrupt
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d101      	bne.n	80005c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        Task_Every_1ms();  // Call the function every 1ms
 80005be:	f000 f807 	bl	80005d0 <Task_Every_1ms>
    }
}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	40000400 	.word	0x40000400

080005d0 <Task_Every_1ms>:

static void Task_Every_1ms(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    counter++;
 80005d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <Task_Every_1ms+0x34>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <Task_Every_1ms+0x34>)
 80005de:	801a      	strh	r2, [r3, #0]
    if (counter >= delay_value){
 80005e0:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <Task_Every_1ms+0x34>)
 80005e2:	881a      	ldrh	r2, [r3, #0]
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <Task_Every_1ms+0x38>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d308      	bcc.n	80005fe <Task_Every_1ms+0x2e>
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Example: Toggle an LED
 80005ec:	2390      	movs	r3, #144	@ 0x90
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	2120      	movs	r1, #32
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 fe7f 	bl	80022f6 <HAL_GPIO_TogglePin>
    	counter = 0;
 80005f8:	4b02      	ldr	r3, [pc, #8]	@ (8000604 <Task_Every_1ms+0x34>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	801a      	strh	r2, [r3, #0]
    }
}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200001ec 	.word	0x200001ec
 8000608:	20000000 	.word	0x20000000

0800060c <generate_Serial_Num>:

static void generate_Serial_Num(void){
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
    uint32_t serial = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
    const uint16_t deviceID = *((volatile uint32_t*)0x1FFFF7E8); // Get the unique ID from the STM32 Chip
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <generate_Serial_Num+0x78>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	003b      	movs	r3, r7
 800061c:	801a      	strh	r2, [r3, #0]
    srand(deviceID); // Generate a 5-digit random number based on the unique ID
 800061e:	003b      	movs	r3, r7
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	0018      	movs	r0, r3
 8000624:	f003 faa8 	bl	8003b78 <srand>
    for (uint8_t i = 0; i < SERIAL_LENGTH; i++){
 8000628:	1cfb      	adds	r3, r7, #3
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	e014      	b.n	800065a <generate_Serial_Num+0x4e>
        serial = serial * 10 + (rand() % 10);
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	0013      	movs	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	189b      	adds	r3, r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	001c      	movs	r4, r3
 800063c:	f003 facc 	bl	8003bd8 <rand>
 8000640:	0003      	movs	r3, r0
 8000642:	210a      	movs	r1, #10
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff fed9 	bl	80003fc <__aeabi_idivmod>
 800064a:	000b      	movs	r3, r1
 800064c:	18e3      	adds	r3, r4, r3
 800064e:	607b      	str	r3, [r7, #4]
    for (uint8_t i = 0; i < SERIAL_LENGTH; i++){
 8000650:	1cfb      	adds	r3, r7, #3
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	1cfb      	adds	r3, r7, #3
 8000656:	3201      	adds	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	1cfb      	adds	r3, r7, #3
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b04      	cmp	r3, #4
 8000660:	d9e6      	bls.n	8000630 <generate_Serial_Num+0x24>
    }
    if(serialNumber == 0){
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <generate_Serial_Num+0x7c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d108      	bne.n	800067c <generate_Serial_Num+0x70>
        serialNumber = serial;
 800066a:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <generate_Serial_Num+0x7c>)
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
        Save_To_Flash(FLASH_USER_START_ADDR, &serialNumber, sizeof(serialNumber));
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <generate_Serial_Num+0x7c>)
 8000672:	4806      	ldr	r0, [pc, #24]	@ (800068c <generate_Serial_Num+0x80>)
 8000674:	2204      	movs	r2, #4
 8000676:	0019      	movs	r1, r3
 8000678:	f7ff fef4 	bl	8000464 <Save_To_Flash>
    }
}
 800067c:	46c0      	nop			@ (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b003      	add	sp, #12
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	1ffff7e8 	.word	0x1ffff7e8
 8000688:	200001f0 	.word	0x200001f0
 800068c:	0800fc00 	.word	0x0800fc00

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b091      	sub	sp, #68	@ 0x44
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	2410      	movs	r4, #16
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2330      	movs	r3, #48	@ 0x30
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f003 fbe7 	bl	8003e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	003b      	movs	r3, r7
 80006a8:	0018      	movs	r0, r3
 80006aa:	2310      	movs	r3, #16
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f003 fbe0 	bl	8003e74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2210      	movs	r2, #16
 80006c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 fe2b 	bl	800232c <HAL_RCC_OscConfig>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80006da:	f000 f99d 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	003b      	movs	r3, r7
 80006e0:	2207      	movs	r2, #7
 80006e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	003b      	movs	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	003b      	movs	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f6:	003b      	movs	r3, r7
 80006f8:	2100      	movs	r1, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 f930 	bl	8002960 <HAL_RCC_ClockConfig>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000704:	f000 f988 	bl	8000a18 <Error_Handler>
  }
}
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b011      	add	sp, #68	@ 0x44
 800070e:	bd90      	pop	{r4, r7, pc}

08000710 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	0018      	movs	r0, r3
 800071a:	230c      	movs	r3, #12
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f003 fba8 	bl	8003e74 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000724:	4b33      	ldr	r3, [pc, #204]	@ (80007f4 <MX_ADC_Init+0xe4>)
 8000726:	4a34      	ldr	r2, [pc, #208]	@ (80007f8 <MX_ADC_Init+0xe8>)
 8000728:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800072a:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <MX_ADC_Init+0xe4>)
 800072c:	2280      	movs	r2, #128	@ 0x80
 800072e:	0612      	lsls	r2, r2, #24
 8000730:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b30      	ldr	r3, [pc, #192]	@ (80007f4 <MX_ADC_Init+0xe4>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b2e      	ldr	r3, [pc, #184]	@ (80007f4 <MX_ADC_Init+0xe4>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800073e:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <MX_ADC_Init+0xe4>)
 8000740:	2201      	movs	r2, #1
 8000742:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000744:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <MX_ADC_Init+0xe4>)
 8000746:	2208      	movs	r2, #8
 8000748:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800074a:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <MX_ADC_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000750:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <MX_ADC_Init+0xe4>)
 8000752:	2200      	movs	r2, #0
 8000754:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000756:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <MX_ADC_Init+0xe4>)
 8000758:	2201      	movs	r2, #1
 800075a:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800075c:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <MX_ADC_Init+0xe4>)
 800075e:	2200      	movs	r2, #0
 8000760:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000762:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <MX_ADC_Init+0xe4>)
 8000764:	22c2      	movs	r2, #194	@ 0xc2
 8000766:	32ff      	adds	r2, #255	@ 0xff
 8000768:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <MX_ADC_Init+0xe4>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <MX_ADC_Init+0xe4>)
 8000772:	2224      	movs	r2, #36	@ 0x24
 8000774:	2101      	movs	r1, #1
 8000776:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000778:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <MX_ADC_Init+0xe4>)
 800077a:	2201      	movs	r2, #1
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800077e:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <MX_ADC_Init+0xe4>)
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fbdb 	bl	8000f3c <HAL_ADC_Init>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 800078a:	f000 f945 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2204      	movs	r2, #4
 8000792:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	0152      	lsls	r2, r2, #5
 800079a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2207      	movs	r2, #7
 80007a0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007a2:	1d3a      	adds	r2, r7, #4
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_ADC_Init+0xe4>)
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 fda1 	bl	80012f0 <HAL_ADC_ConfigChannel>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80007b2:	f000 f931 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007bc:	1d3a      	adds	r2, r7, #4
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_ADC_Init+0xe4>)
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 fd94 	bl	80012f0 <HAL_ADC_ConfigChannel>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80007cc:	f000 f924 	bl	8000a18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2210      	movs	r2, #16
 80007d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_ADC_Init+0xe4>)
 80007da:	0011      	movs	r1, r2
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fd87 	bl	80012f0 <HAL_ADC_ConfigChannel>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80007e6:	f000 f917 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	2000008c 	.word	0x2000008c
 80007f8:	40012400 	.word	0x40012400

080007fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	2308      	movs	r3, #8
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	0018      	movs	r0, r3
 8000808:	2310      	movs	r3, #16
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f003 fb31 	bl	8003e74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000812:	003b      	movs	r3, r7
 8000814:	0018      	movs	r0, r3
 8000816:	2308      	movs	r3, #8
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f003 fb2a 	bl	8003e74 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000822:	4a1f      	ldr	r2, [pc, #124]	@ (80008a0 <MX_TIM3_Init+0xa4>)
 8000824:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000828:	2207      	movs	r2, #7
 800082a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_TIM3_Init+0xa0>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000834:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <MX_TIM3_Init+0xa8>)
 8000836:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_TIM3_Init+0xa0>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000846:	0018      	movs	r0, r3
 8000848:	f002 f9ce 	bl	8002be8 <HAL_TIM_Base_Init>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000850:	f000 f8e2 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	2108      	movs	r1, #8
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2280      	movs	r2, #128	@ 0x80
 800085a:	0152      	lsls	r2, r2, #5
 800085c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085e:	187a      	adds	r2, r7, r1
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f002 fb49 	bl	8002efc <HAL_TIM_ConfigClockSource>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800086e:	f000 f8d3 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	003b      	movs	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	003b      	movs	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800087e:	003a      	movs	r2, r7
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_TIM3_Init+0xa0>)
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f002 fd4b 	bl	8003320 <HAL_TIMEx_MasterConfigSynchronization>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800088e:	f000 f8c3 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b006      	add	sp, #24
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	20000110 	.word	0x20000110
 80008a0:	40000400 	.word	0x40000400
 80008a4:	000003e7 	.word	0x000003e7

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <MX_USART2_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008b4:	2296      	movs	r2, #150	@ 0x96
 80008b6:	0212      	lsls	r2, r2, #8
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <MX_USART2_UART_Init+0x58>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f002 fd7f 	bl	80033f0 <HAL_UART_Init>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f88f 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000158 	.word	0x20000158
 8000904:	40004400 	.word	0x40004400

08000908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_DMA_Init+0x38>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_DMA_Init+0x38>)
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_DMA_Init+0x38>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2009      	movs	r0, #9
 800092c:	f000 ff8a 	bl	8001844 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000930:	2009      	movs	r0, #9
 8000932:	f000 ff9c 	bl	800186e <HAL_NVIC_EnableIRQ>

}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	40021000 	.word	0x40021000

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b089      	sub	sp, #36	@ 0x24
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	240c      	movs	r4, #12
 800094c:	193b      	adds	r3, r7, r4
 800094e:	0018      	movs	r0, r3
 8000950:	2314      	movs	r3, #20
 8000952:	001a      	movs	r2, r3
 8000954:	2100      	movs	r1, #0
 8000956:	f003 fa8d 	bl	8003e74 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <MX_GPIO_Init+0xcc>)
 800095c:	695a      	ldr	r2, [r3, #20]
 800095e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <MX_GPIO_Init+0xcc>)
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	0309      	lsls	r1, r1, #12
 8000964:	430a      	orrs	r2, r1
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <MX_GPIO_Init+0xcc>)
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	031b      	lsls	r3, r3, #12
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000976:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <MX_GPIO_Init+0xcc>)
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <MX_GPIO_Init+0xcc>)
 800097c:	2180      	movs	r1, #128	@ 0x80
 800097e:	03c9      	lsls	r1, r1, #15
 8000980:	430a      	orrs	r2, r1
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_GPIO_Init+0xcc>)
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	2380      	movs	r3, #128	@ 0x80
 800098a:	03db      	lsls	r3, r3, #15
 800098c:	4013      	ands	r3, r2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_GPIO_Init+0xcc>)
 8000994:	695a      	ldr	r2, [r3, #20]
 8000996:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_GPIO_Init+0xcc>)
 8000998:	2180      	movs	r1, #128	@ 0x80
 800099a:	0289      	lsls	r1, r1, #10
 800099c:	430a      	orrs	r2, r1
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_GPIO_Init+0xcc>)
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	2380      	movs	r3, #128	@ 0x80
 80009a6:	029b      	lsls	r3, r3, #10
 80009a8:	4013      	ands	r3, r2
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2390      	movs	r3, #144	@ 0x90
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	2200      	movs	r2, #0
 80009b4:	2120      	movs	r1, #32
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 fc80 	bl	80022bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2280      	movs	r2, #128	@ 0x80
 80009c0:	0192      	lsls	r2, r2, #6
 80009c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	2284      	movs	r2, #132	@ 0x84
 80009c8:	0392      	lsls	r2, r2, #14
 80009ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <MX_GPIO_Init+0xd0>)
 80009d6:	0019      	movs	r1, r3
 80009d8:	0010      	movs	r0, r2
 80009da:	f001 faff 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2220      	movs	r2, #32
 80009e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2201      	movs	r2, #1
 80009ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f8:	187a      	adds	r2, r7, r1
 80009fa:	2390      	movs	r3, #144	@ 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 faeb 	bl	8001fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b009      	add	sp, #36	@ 0x24
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000800 	.word	0x48000800

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	e7fd      	b.n	8000a20 <Error_Handler+0x8>

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	699a      	ldr	r2, [r3, #24]
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	430a      	orrs	r2, r1
 8000a34:	619a      	str	r2, [r3, #24]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a44:	69da      	ldr	r2, [r3, #28]
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	0549      	lsls	r1, r1, #21
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	61da      	str	r2, [r3, #28]
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a52:	69da      	ldr	r2, [r3, #28]
 8000a54:	2380      	movs	r3, #128	@ 0x80
 8000a56:	055b      	lsls	r3, r3, #21
 8000a58:	4013      	ands	r3, r2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08b      	sub	sp, #44	@ 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	2414      	movs	r4, #20
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2314      	movs	r3, #20
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f003 f9f8 	bl	8003e74 <memset>
  if(hadc->Instance==ADC1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a2d      	ldr	r2, [pc, #180]	@ (8000b40 <HAL_ADC_MspInit+0xd4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d153      	bne.n	8000b36 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <HAL_ADC_MspInit+0xd8>)
 8000a90:	699a      	ldr	r2, [r3, #24]
 8000a92:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <HAL_ADC_MspInit+0xd8>)
 8000a94:	2180      	movs	r1, #128	@ 0x80
 8000a96:	0089      	lsls	r1, r1, #2
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	619a      	str	r2, [r3, #24]
 8000a9c:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <HAL_ADC_MspInit+0xd8>)
 8000a9e:	699a      	ldr	r2, [r3, #24]
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <HAL_ADC_MspInit+0xd8>)
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <HAL_ADC_MspInit+0xd8>)
 8000ab0:	2180      	movs	r1, #128	@ 0x80
 8000ab2:	0289      	lsls	r1, r1, #10
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <HAL_ADC_MspInit+0xd8>)
 8000aba:	695a      	ldr	r2, [r3, #20]
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	029b      	lsls	r3, r3, #10
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2290      	movs	r2, #144	@ 0x90
 8000aca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2203      	movs	r2, #3
 8000ad0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	193a      	adds	r2, r7, r4
 8000ada:	2390      	movs	r3, #144	@ 0x90
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 fa7b 	bl	8001fdc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000ae8:	4a18      	ldr	r2, [pc, #96]	@ (8000b4c <HAL_ADC_MspInit+0xe0>)
 8000aea:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000b00:	2280      	movs	r2, #128	@ 0x80
 8000b02:	0092      	lsls	r2, r2, #2
 8000b04:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000b08:	2280      	movs	r2, #128	@ 0x80
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000b10:	2220      	movs	r2, #32
 8000b12:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 fec3 	bl	80018a8 <HAL_DMA_Init>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000b26:	f7ff ff77 	bl	8000a18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a06      	ldr	r2, [pc, #24]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_ADC_MspInit+0xdc>)
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b00b      	add	sp, #44	@ 0x2c
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	40012400 	.word	0x40012400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	200000cc 	.word	0x200000cc
 8000b4c:	40020008 	.word	0x40020008

08000b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <HAL_TIM_Base_MspInit+0x44>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d113      	bne.n	8000b8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_TIM_Base_MspInit+0x48>)
 8000b64:	69da      	ldr	r2, [r3, #28]
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <HAL_TIM_Base_MspInit+0x48>)
 8000b68:	2102      	movs	r1, #2
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	61da      	str	r2, [r3, #28]
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <HAL_TIM_Base_MspInit+0x48>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	2202      	movs	r2, #2
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2010      	movs	r0, #16
 8000b80:	f000 fe60 	bl	8001844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b84:	2010      	movs	r0, #16
 8000b86:	f000 fe72 	bl	800186e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	40000400 	.word	0x40000400
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b08b      	sub	sp, #44	@ 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	2414      	movs	r4, #20
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2314      	movs	r3, #20
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f003 f960 	bl	8003e74 <memset>
  if(huart->Instance==USART2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c2c <HAL_UART_MspInit+0x90>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d132      	bne.n	8000c24 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_UART_MspInit+0x94>)
 8000bc0:	69da      	ldr	r2, [r3, #28]
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <HAL_UART_MspInit+0x94>)
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	0289      	lsls	r1, r1, #10
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	61da      	str	r2, [r3, #28]
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <HAL_UART_MspInit+0x94>)
 8000bce:	69da      	ldr	r2, [r3, #28]
 8000bd0:	2380      	movs	r3, #128	@ 0x80
 8000bd2:	029b      	lsls	r3, r3, #10
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_UART_MspInit+0x94>)
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <HAL_UART_MspInit+0x94>)
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	0289      	lsls	r1, r1, #10
 8000be4:	430a      	orrs	r2, r1
 8000be6:	615a      	str	r2, [r3, #20]
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_UART_MspInit+0x94>)
 8000bea:	695a      	ldr	r2, [r3, #20]
 8000bec:	2380      	movs	r3, #128	@ 0x80
 8000bee:	029b      	lsls	r3, r3, #10
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf6:	0021      	movs	r1, r4
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2202      	movs	r2, #2
 8000c02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2201      	movs	r2, #1
 8000c14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	187a      	adds	r2, r7, r1
 8000c18:	2390      	movs	r3, #144	@ 0x90
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	0011      	movs	r1, r2
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f001 f9dc 	bl	8001fdc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b00b      	add	sp, #44	@ 0x2c
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	40004400 	.word	0x40004400
 8000c30:	40021000 	.word	0x40021000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f952 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <DMA1_Channel1_IRQHandler+0x14>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 fec8 	bl	8001a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	200000cc 	.word	0x200000cc

08000c80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <TIM3_IRQHandler+0x14>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f002 f84a 	bl	8002d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	20000110 	.word	0x20000110

08000c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  return 1;
 8000c9c:	2301      	movs	r3, #1
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_kill>:

int _kill(int pid, int sig)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cae:	f003 f937 	bl	8003f20 <__errno>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	2216      	movs	r2, #22
 8000cb6:	601a      	str	r2, [r3, #0]
  return -1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_exit>:

void _exit (int status)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ccc:	2301      	movs	r3, #1
 8000cce:	425a      	negs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ffe5 	bl	8000ca4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	e7fd      	b.n	8000cda <_exit+0x16>

08000cde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e00a      	b.n	8000d06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf0:	e000      	b.n	8000cf4 <_read+0x16>
 8000cf2:	bf00      	nop
 8000cf4:	0001      	movs	r1, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	60ba      	str	r2, [r7, #8]
 8000cfc:	b2ca      	uxtb	r2, r1
 8000cfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	dbf0      	blt.n	8000cf0 <_read+0x12>
  }

  return len;
 8000d0e:	687b      	ldr	r3, [r7, #4]
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b006      	add	sp, #24
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e009      	b.n	8000d3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	60ba      	str	r2, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	0018      	movs	r0, r3
 8000d34:	e000      	b.n	8000d38 <_write+0x20>
 8000d36:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dbf1      	blt.n	8000d2a <_write+0x12>
  }
  return len;
 8000d46:	687b      	ldr	r3, [r7, #4]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b006      	add	sp, #24
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_close>:

int _close(int file)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	425b      	negs	r3, r3
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	0192      	lsls	r2, r2, #6
 8000d74:	605a      	str	r2, [r3, #4]
  return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_isatty>:

int _isatty(int file)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b004      	add	sp, #16
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	18d3      	adds	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f003 f8a2 	bl	8003f20 <__errno>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	425b      	negs	r3, r3
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	18d2      	adds	r2, r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <_sbrk+0x64>)
 8000df8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b006      	add	sp, #24
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20002000 	.word	0x20002000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	200001f8 	.word	0x200001f8
 8000e10:	20000370 	.word	0x20000370

08000e14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e20:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e24:	f7ff fff6 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	@ (8000e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <LoopForever+0xe>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	@ (8000e6c <LoopForever+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4e:	f003 f86d 	bl	8003f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e52:	f7ff fb6b 	bl	800052c <main>

08000e56 <LoopForever>:

LoopForever:
    b LoopForever
 8000e56:	e7fe      	b.n	8000e56 <LoopForever>
  ldr   r0, =_estack
 8000e58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e64:	08004d40 	.word	0x08004d40
  ldr r2, =_sbss
 8000e68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e6c:	2000036c 	.word	0x2000036c

08000e70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_IRQHandler>
	...

08000e74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <HAL_Init+0x24>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_Init+0x24>)
 8000e7e:	2110      	movs	r1, #16
 8000e80:	430a      	orrs	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 f809 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8a:	f7ff fdcb 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <HAL_InitTick+0x5c>)
 8000ea6:	681c      	ldr	r4, [r3, #0]
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_InitTick+0x60>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	0019      	movs	r1, r3
 8000eae:	23fa      	movs	r3, #250	@ 0xfa
 8000eb0:	0098      	lsls	r0, r3, #2
 8000eb2:	f7ff f933 	bl	800011c <__udivsi3>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	0019      	movs	r1, r3
 8000eba:	0020      	movs	r0, r4
 8000ebc:	f7ff f92e 	bl	800011c <__udivsi3>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 fce3 	bl	800188e <HAL_SYSTICK_Config>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e00f      	b.n	8000ef0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d80b      	bhi.n	8000eee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 fcb0 	bl	8001844 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_InitTick+0x64>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b003      	add	sp, #12
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	2000000c 	.word	0x2000000c
 8000f00:	20000008 	.word	0x20000008

08000f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x1c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	18d2      	adds	r2, r2, r3
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	2000000c 	.word	0x2000000c
 8000f24:	200001fc 	.word	0x200001fc

08000f28 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	@ (8000f38 <HAL_GetTick+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	200001fc 	.word	0x200001fc

08000f3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f44:	230f      	movs	r3, #15
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e125      	b.n	80011a6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10a      	bne.n	8000f78 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2234      	movs	r2, #52	@ 0x34
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff fd7a 	bl	8000a6c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d000      	beq.n	8000f84 <HAL_ADC_Init+0x48>
 8000f82:	e103      	b.n	800118c <HAL_ADC_Init+0x250>
 8000f84:	230f      	movs	r3, #15
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d000      	beq.n	8000f90 <HAL_ADC_Init+0x54>
 8000f8e:	e0fd      	b.n	800118c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	2204      	movs	r2, #4
 8000f98:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f9a:	d000      	beq.n	8000f9e <HAL_ADC_Init+0x62>
 8000f9c:	e0f6      	b.n	800118c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa2:	4a83      	ldr	r2, [pc, #524]	@ (80011b0 <HAL_ADC_Init+0x274>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d112      	bne.n	8000fe2 <HAL_ADC_Init+0xa6>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d009      	beq.n	8000fde <HAL_ADC_Init+0xa2>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	2380      	movs	r3, #128	@ 0x80
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_Init+0xa6>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_ADC_Init+0xa8>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d116      	bne.n	8001016 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2218      	movs	r2, #24
 8000ff0:	4393      	bics	r3, r2
 8000ff2:	0019      	movs	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	0899      	lsrs	r1, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4964      	ldr	r1, [pc, #400]	@ (80011b4 <HAL_ADC_Init+0x278>)
 8001022:	400a      	ands	r2, r1
 8001024:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7e1b      	ldrb	r3, [r3, #24]
 800102a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7e5b      	ldrb	r3, [r3, #25]
 8001030:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001032:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7e9b      	ldrb	r3, [r3, #26]
 8001038:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800103a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001040:	2b01      	cmp	r3, #1
 8001042:	d002      	beq.n	800104a <HAL_ADC_Init+0x10e>
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	015b      	lsls	r3, r3, #5
 8001048:	e000      	b.n	800104c <HAL_ADC_Init+0x110>
 800104a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800104c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001052:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d101      	bne.n	8001060 <HAL_ADC_Init+0x124>
 800105c:	2304      	movs	r3, #4
 800105e:	e000      	b.n	8001062 <HAL_ADC_Init+0x126>
 8001060:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001062:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2124      	movs	r1, #36	@ 0x24
 8001068:	5c5b      	ldrb	r3, [r3, r1]
 800106a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800106c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	4313      	orrs	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7edb      	ldrb	r3, [r3, #27]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d115      	bne.n	80010a8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e9b      	ldrb	r3, [r3, #26]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d105      	bne.n	8001090 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2280      	movs	r2, #128	@ 0x80
 8001088:	0252      	lsls	r2, r2, #9
 800108a:	4313      	orrs	r3, r2
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	e00b      	b.n	80010a8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001094:	2220      	movs	r2, #32
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010a0:	2201      	movs	r2, #1
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69da      	ldr	r2, [r3, #28]
 80010ac:	23c2      	movs	r3, #194	@ 0xc2
 80010ae:	33ff      	adds	r3, #255	@ 0xff
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d007      	beq.n	80010c4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80010bc:	4313      	orrs	r3, r2
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d9      	ldr	r1, [r3, #12]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	055b      	lsls	r3, r3, #21
 80010dc:	429a      	cmp	r2, r3
 80010de:	d01b      	beq.n	8001118 <HAL_ADC_Init+0x1dc>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d017      	beq.n	8001118 <HAL_ADC_Init+0x1dc>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d013      	beq.n	8001118 <HAL_ADC_Init+0x1dc>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d00f      	beq.n	8001118 <HAL_ADC_Init+0x1dc>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d00b      	beq.n	8001118 <HAL_ADC_Init+0x1dc>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001104:	2b05      	cmp	r3, #5
 8001106:	d007      	beq.n	8001118 <HAL_ADC_Init+0x1dc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800110c:	2b06      	cmp	r3, #6
 800110e:	d003      	beq.n	8001118 <HAL_ADC_Init+0x1dc>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001114:	2b07      	cmp	r3, #7
 8001116:	d112      	bne.n	800113e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2107      	movs	r1, #7
 8001124:	438a      	bics	r2, r1
 8001126:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6959      	ldr	r1, [r3, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001132:	2207      	movs	r2, #7
 8001134:	401a      	ands	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	430a      	orrs	r2, r1
 800113c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <HAL_ADC_Init+0x27c>)
 8001146:	4013      	ands	r3, r2
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	429a      	cmp	r2, r3
 800114c:	d10b      	bne.n	8001166 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001158:	2203      	movs	r2, #3
 800115a:	4393      	bics	r3, r2
 800115c:	2201      	movs	r2, #1
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001164:	e01c      	b.n	80011a0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800116a:	2212      	movs	r2, #18
 800116c:	4393      	bics	r3, r2
 800116e:	2210      	movs	r2, #16
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800117a:	2201      	movs	r2, #1
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001182:	230f      	movs	r3, #15
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800118a:	e009      	b.n	80011a0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001190:	2210      	movs	r2, #16
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	781b      	ldrb	r3, [r3, #0]
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	fffffefd 	.word	0xfffffefd
 80011b4:	fffe0219 	.word	0xfffe0219
 80011b8:	833fffe7 	.word	0x833fffe7

080011bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c8:	2317      	movs	r3, #23
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2204      	movs	r2, #4
 80011d8:	4013      	ands	r3, r2
 80011da:	d15e      	bne.n	800129a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2234      	movs	r2, #52	@ 0x34
 80011e0:	5c9b      	ldrb	r3, [r3, r2]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_ADC_Start_DMA+0x2e>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e05e      	b.n	80012a8 <HAL_ADC_Start_DMA+0xec>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2234      	movs	r2, #52	@ 0x34
 80011ee:	2101      	movs	r1, #1
 80011f0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	7e5b      	ldrb	r3, [r3, #25]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d007      	beq.n	800120a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80011fa:	2317      	movs	r3, #23
 80011fc:	18fc      	adds	r4, r7, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	0018      	movs	r0, r3
 8001202:	f000 f96b 	bl	80014dc <ADC_Enable>
 8001206:	0003      	movs	r3, r0
 8001208:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800120a:	2317      	movs	r3, #23
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d146      	bne.n	80012a2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001218:	4a25      	ldr	r2, [pc, #148]	@ (80012b0 <HAL_ADC_Start_DMA+0xf4>)
 800121a:	4013      	ands	r3, r2
 800121c:	2280      	movs	r2, #128	@ 0x80
 800121e:	0052      	lsls	r2, r2, #1
 8001220:	431a      	orrs	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2234      	movs	r2, #52	@ 0x34
 8001230:	2100      	movs	r1, #0
 8001232:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001238:	4a1e      	ldr	r2, [pc, #120]	@ (80012b4 <HAL_ADC_Start_DMA+0xf8>)
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4a1d      	ldr	r2, [pc, #116]	@ (80012b8 <HAL_ADC_Start_DMA+0xfc>)
 8001242:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001248:	4a1c      	ldr	r2, [pc, #112]	@ (80012bc <HAL_ADC_Start_DMA+0x100>)
 800124a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	221c      	movs	r2, #28
 8001252:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2110      	movs	r1, #16
 8001260:	430a      	orrs	r2, r1
 8001262:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2101      	movs	r1, #1
 8001270:	430a      	orrs	r2, r1
 8001272:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3340      	adds	r3, #64	@ 0x40
 800127e:	0019      	movs	r1, r3
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f000 fb58 	bl	8001938 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2104      	movs	r1, #4
 8001294:	430a      	orrs	r2, r1
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e003      	b.n	80012a2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800129a:	2317      	movs	r3, #23
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	2202      	movs	r2, #2
 80012a0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80012a2:	2317      	movs	r3, #23
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	781b      	ldrb	r3, [r3, #0]
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b007      	add	sp, #28
 80012ae:	bd90      	pop	{r4, r7, pc}
 80012b0:	fffff0fe 	.word	0xfffff0fe
 80012b4:	080015e5 	.word	0x080015e5
 80012b8:	08001699 	.word	0x08001699
 80012bc:	080016b7 	.word	0x080016b7

080012c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80012c8:	46c0      	nop			@ (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80012d8:	46c0      	nop			@ (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012fa:	230f      	movs	r3, #15
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800130a:	2380      	movs	r3, #128	@ 0x80
 800130c:	055b      	lsls	r3, r3, #21
 800130e:	429a      	cmp	r2, r3
 8001310:	d011      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d00d      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131e:	2b02      	cmp	r3, #2
 8001320:	d009      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001326:	2b03      	cmp	r3, #3
 8001328:	d005      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132e:	2b04      	cmp	r3, #4
 8001330:	d001      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2234      	movs	r2, #52	@ 0x34
 800133a:	5c9b      	ldrb	r3, [r3, r2]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x54>
 8001340:	2302      	movs	r3, #2
 8001342:	e0bb      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1cc>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2234      	movs	r2, #52	@ 0x34
 8001348:	2101      	movs	r1, #1
 800134a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2204      	movs	r2, #4
 8001354:	4013      	ands	r3, r2
 8001356:	d000      	beq.n	800135a <HAL_ADC_ConfigChannel+0x6a>
 8001358:	e09f      	b.n	800149a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a59      	ldr	r2, [pc, #356]	@ (80014c4 <HAL_ADC_ConfigChannel+0x1d4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d100      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x76>
 8001364:	e077      	b.n	8001456 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2201      	movs	r2, #1
 8001372:	409a      	lsls	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	055b      	lsls	r3, r3, #21
 8001384:	429a      	cmp	r2, r3
 8001386:	d037      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138c:	2b01      	cmp	r3, #1
 800138e:	d033      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001394:	2b02      	cmp	r3, #2
 8001396:	d02f      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139c:	2b03      	cmp	r3, #3
 800139e:	d02b      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d027      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d023      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d01f      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013bc:	2b07      	cmp	r3, #7
 80013be:	d01b      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2107      	movs	r1, #7
 80013cc:	400b      	ands	r3, r1
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d012      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2107      	movs	r1, #7
 80013de:	438a      	bics	r2, r1
 80013e0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6959      	ldr	r1, [r3, #20]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2207      	movs	r2, #7
 80013ee:	401a      	ands	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b10      	cmp	r3, #16
 80013fe:	d003      	beq.n	8001408 <HAL_ADC_ConfigChannel+0x118>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b11      	cmp	r3, #17
 8001406:	d152      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001408:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <HAL_ADC_ConfigChannel+0x1d8>)
 800140a:	6819      	ldr	r1, [r3, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b10      	cmp	r3, #16
 8001412:	d102      	bne.n	800141a <HAL_ADC_ConfigChannel+0x12a>
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	e001      	b.n	800141e <HAL_ADC_ConfigChannel+0x12e>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	03db      	lsls	r3, r3, #15
 800141e:	4a2a      	ldr	r2, [pc, #168]	@ (80014c8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001420:	430b      	orrs	r3, r1
 8001422:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b10      	cmp	r3, #16
 800142a:	d140      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800142c:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <HAL_ADC_ConfigChannel+0x1dc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4927      	ldr	r1, [pc, #156]	@ (80014d0 <HAL_ADC_ConfigChannel+0x1e0>)
 8001432:	0018      	movs	r0, r3
 8001434:	f7fe fe72 	bl	800011c <__udivsi3>
 8001438:	0003      	movs	r3, r0
 800143a:	001a      	movs	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	189b      	adds	r3, r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001446:	e002      	b.n	800144e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3b01      	subs	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f9      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x158>
 8001454:	e02b      	b.n	80014ae <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	4099      	lsls	r1, r3
 8001464:	000b      	movs	r3, r1
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	400a      	ands	r2, r1
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b10      	cmp	r3, #16
 8001476:	d003      	beq.n	8001480 <HAL_ADC_ConfigChannel+0x190>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b11      	cmp	r3, #17
 800147e:	d116      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b10      	cmp	r3, #16
 800148a:	d101      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x1a0>
 800148c:	4a11      	ldr	r2, [pc, #68]	@ (80014d4 <HAL_ADC_ConfigChannel+0x1e4>)
 800148e:	e000      	b.n	8001492 <HAL_ADC_ConfigChannel+0x1a2>
 8001490:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001494:	400a      	ands	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e009      	b.n	80014ae <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149e:	2220      	movs	r2, #32
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80014a6:	230f      	movs	r3, #15
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2234      	movs	r2, #52	@ 0x34
 80014b2:	2100      	movs	r1, #0
 80014b4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80014b6:	230f      	movs	r3, #15
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	781b      	ldrb	r3, [r3, #0]
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b004      	add	sp, #16
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	00001001 	.word	0x00001001
 80014c8:	40012708 	.word	0x40012708
 80014cc:	20000004 	.word	0x20000004
 80014d0:	000f4240 	.word	0x000f4240
 80014d4:	ff7fffff 	.word	0xff7fffff
 80014d8:	ffbfffff 	.word	0xffbfffff

080014dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2203      	movs	r2, #3
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d112      	bne.n	8001520 <ADC_Enable+0x44>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	4013      	ands	r3, r2
 8001504:	2b01      	cmp	r3, #1
 8001506:	d009      	beq.n	800151c <ADC_Enable+0x40>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	401a      	ands	r2, r3
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	429a      	cmp	r2, r3
 800151a:	d101      	bne.n	8001520 <ADC_Enable+0x44>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <ADC_Enable+0x46>
 8001520:	2300      	movs	r3, #0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d152      	bne.n	80015cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4a2a      	ldr	r2, [pc, #168]	@ (80015d8 <ADC_Enable+0xfc>)
 800152e:	4013      	ands	r3, r2
 8001530:	d00d      	beq.n	800154e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001536:	2210      	movs	r2, #16
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001542:	2201      	movs	r2, #1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e03f      	b.n	80015ce <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800155e:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <ADC_Enable+0x100>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	491f      	ldr	r1, [pc, #124]	@ (80015e0 <ADC_Enable+0x104>)
 8001564:	0018      	movs	r0, r3
 8001566:	f7fe fdd9 	bl	800011c <__udivsi3>
 800156a:	0003      	movs	r3, r0
 800156c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800156e:	e002      	b.n	8001576 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3b01      	subs	r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f9      	bne.n	8001570 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800157c:	f7ff fcd4 	bl	8000f28 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001584:	e01b      	b.n	80015be <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001586:	f7ff fccf 	bl	8000f28 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d914      	bls.n	80015be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	4013      	ands	r3, r2
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d00d      	beq.n	80015be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a6:	2210      	movs	r2, #16
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b2:	2201      	movs	r2, #1
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e007      	b.n	80015ce <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d1dc      	bne.n	8001586 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	80000017 	.word	0x80000017
 80015dc:	20000004 	.word	0x20000004
 80015e0:	000f4240 	.word	0x000f4240

080015e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f6:	2250      	movs	r2, #80	@ 0x50
 80015f8:	4013      	ands	r3, r2
 80015fa:	d140      	bne.n	800167e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001600:	2280      	movs	r2, #128	@ 0x80
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	23c0      	movs	r3, #192	@ 0xc0
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	4013      	ands	r3, r2
 8001616:	d12d      	bne.n	8001674 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800161c:	2b00      	cmp	r3, #0
 800161e:	d129      	bne.n	8001674 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2208      	movs	r2, #8
 8001628:	4013      	ands	r3, r2
 800162a:	2b08      	cmp	r3, #8
 800162c:	d122      	bne.n	8001674 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2204      	movs	r2, #4
 8001636:	4013      	ands	r3, r2
 8001638:	d110      	bne.n	800165c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	210c      	movs	r1, #12
 8001646:	438a      	bics	r2, r1
 8001648:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164e:	4a11      	ldr	r2, [pc, #68]	@ (8001694 <ADC_DMAConvCplt+0xb0>)
 8001650:	4013      	ands	r3, r2
 8001652:	2201      	movs	r2, #1
 8001654:	431a      	orrs	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	639a      	str	r2, [r3, #56]	@ 0x38
 800165a:	e00b      	b.n	8001674 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001660:	2220      	movs	r2, #32
 8001662:	431a      	orrs	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800166c:	2201      	movs	r2, #1
 800166e:	431a      	orrs	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff fe22 	bl	80012c0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800167c:	e005      	b.n	800168a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	0010      	movs	r0, r2
 8001688:	4798      	blx	r3
}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	fffffefe 	.word	0xfffffefe

08001698 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff fe11 	bl	80012d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b004      	add	sp, #16
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c8:	2240      	movs	r2, #64	@ 0x40
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d4:	2204      	movs	r2, #4
 80016d6:	431a      	orrs	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff fdfe 	bl	80012e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016e4:	46c0      	nop			@ (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b004      	add	sp, #16
 80016ea:	bd80      	pop	{r7, pc}

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	0002      	movs	r2, r0
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80016fe:	d809      	bhi.n	8001714 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	001a      	movs	r2, r3
 8001706:	231f      	movs	r3, #31
 8001708:	401a      	ands	r2, r3
 800170a:	4b04      	ldr	r3, [pc, #16]	@ (800171c <__NVIC_EnableIRQ+0x30>)
 800170c:	2101      	movs	r1, #1
 800170e:	4091      	lsls	r1, r2
 8001710:	000a      	movs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
  }
}
 8001714:	46c0      	nop			@ (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b002      	add	sp, #8
 800171a:	bd80      	pop	{r7, pc}
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	0002      	movs	r2, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b7f      	cmp	r3, #127	@ 0x7f
 8001734:	d828      	bhi.n	8001788 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001736:	4a2f      	ldr	r2, [pc, #188]	@ (80017f4 <__NVIC_SetPriority+0xd4>)
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	33c0      	adds	r3, #192	@ 0xc0
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	589b      	ldr	r3, [r3, r2]
 8001746:	1dfa      	adds	r2, r7, #7
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	0011      	movs	r1, r2
 800174c:	2203      	movs	r2, #3
 800174e:	400a      	ands	r2, r1
 8001750:	00d2      	lsls	r2, r2, #3
 8001752:	21ff      	movs	r1, #255	@ 0xff
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	43d2      	mvns	r2, r2
 800175a:	401a      	ands	r2, r3
 800175c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	22ff      	movs	r2, #255	@ 0xff
 8001764:	401a      	ands	r2, r3
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	2303      	movs	r3, #3
 800176e:	4003      	ands	r3, r0
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001774:	481f      	ldr	r0, [pc, #124]	@ (80017f4 <__NVIC_SetPriority+0xd4>)
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b25b      	sxtb	r3, r3
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	430a      	orrs	r2, r1
 8001780:	33c0      	adds	r3, #192	@ 0xc0
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001786:	e031      	b.n	80017ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001788:	4a1b      	ldr	r2, [pc, #108]	@ (80017f8 <__NVIC_SetPriority+0xd8>)
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	0019      	movs	r1, r3
 8001790:	230f      	movs	r3, #15
 8001792:	400b      	ands	r3, r1
 8001794:	3b08      	subs	r3, #8
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3306      	adds	r3, #6
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	18d3      	adds	r3, r2, r3
 800179e:	3304      	adds	r3, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1dfa      	adds	r2, r7, #7
 80017a4:	7812      	ldrb	r2, [r2, #0]
 80017a6:	0011      	movs	r1, r2
 80017a8:	2203      	movs	r2, #3
 80017aa:	400a      	ands	r2, r1
 80017ac:	00d2      	lsls	r2, r2, #3
 80017ae:	21ff      	movs	r1, #255	@ 0xff
 80017b0:	4091      	lsls	r1, r2
 80017b2:	000a      	movs	r2, r1
 80017b4:	43d2      	mvns	r2, r2
 80017b6:	401a      	ands	r2, r3
 80017b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	22ff      	movs	r2, #255	@ 0xff
 80017c0:	401a      	ands	r2, r3
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	0018      	movs	r0, r3
 80017c8:	2303      	movs	r3, #3
 80017ca:	4003      	ands	r3, r0
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d0:	4809      	ldr	r0, [pc, #36]	@ (80017f8 <__NVIC_SetPriority+0xd8>)
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	001c      	movs	r4, r3
 80017d8:	230f      	movs	r3, #15
 80017da:	4023      	ands	r3, r4
 80017dc:	3b08      	subs	r3, #8
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	430a      	orrs	r2, r1
 80017e2:	3306      	adds	r3, #6
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	18c3      	adds	r3, r0, r3
 80017e8:	3304      	adds	r3, #4
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b003      	add	sp, #12
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	1e5a      	subs	r2, r3, #1
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	045b      	lsls	r3, r3, #17
 800180c:	429a      	cmp	r2, r3
 800180e:	d301      	bcc.n	8001814 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001810:	2301      	movs	r3, #1
 8001812:	e010      	b.n	8001836 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001814:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <SysTick_Config+0x44>)
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	3a01      	subs	r2, #1
 800181a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181c:	2301      	movs	r3, #1
 800181e:	425b      	negs	r3, r3
 8001820:	2103      	movs	r1, #3
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff ff7c 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <SysTick_Config+0x44>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <SysTick_Config+0x44>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	0018      	movs	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	210f      	movs	r1, #15
 8001850:	187b      	adds	r3, r7, r1
 8001852:	1c02      	adds	r2, r0, #0
 8001854:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	187b      	adds	r3, r7, r1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b25b      	sxtb	r3, r3
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	0002      	movs	r2, r0
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b25b      	sxtb	r3, r3
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff33 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0018      	movs	r0, r3
 800189a:	f7ff ffaf 	bl	80017fc <SysTick_Config>
 800189e:	0003      	movs	r3, r0
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e036      	b.n	800192c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2221      	movs	r2, #33	@ 0x21
 80018c2:	2102      	movs	r1, #2
 80018c4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4a18      	ldr	r2, [pc, #96]	@ (8001934 <HAL_DMA_Init+0x8c>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	0018      	movs	r0, r3
 8001910:	f000 f946 	bl	8001ba0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2221      	movs	r2, #33	@ 0x21
 800191e:	2101      	movs	r1, #1
 8001920:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2220      	movs	r2, #32
 8001926:	2100      	movs	r1, #0
 8001928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b004      	add	sp, #16
 8001932:	bd80      	pop	{r7, pc}
 8001934:	ffffc00f 	.word	0xffffc00f

08001938 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001946:	2317      	movs	r3, #23
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2220      	movs	r2, #32
 8001952:	5c9b      	ldrb	r3, [r3, r2]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_DMA_Start_IT+0x24>
 8001958:	2302      	movs	r3, #2
 800195a:	e04f      	b.n	80019fc <HAL_DMA_Start_IT+0xc4>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2220      	movs	r2, #32
 8001960:	2101      	movs	r1, #1
 8001962:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2221      	movs	r2, #33	@ 0x21
 8001968:	5c9b      	ldrb	r3, [r3, r2]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d13a      	bne.n	80019e6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2221      	movs	r2, #33	@ 0x21
 8001974:	2102      	movs	r1, #2
 8001976:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	438a      	bics	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	68b9      	ldr	r1, [r7, #8]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f8d7 	bl	8001b48 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	210e      	movs	r1, #14
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e00f      	b.n	80019d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	210a      	movs	r1, #10
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2104      	movs	r1, #4
 80019d0:	438a      	bics	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2101      	movs	r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e007      	b.n	80019f6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2220      	movs	r2, #32
 80019ea:	2100      	movs	r1, #0
 80019ec:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019ee:	2317      	movs	r3, #23
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	2202      	movs	r2, #2
 80019f4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80019f6:	2317      	movs	r3, #23
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	781b      	ldrb	r3, [r3, #0]
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b006      	add	sp, #24
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	2204      	movs	r2, #4
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d024      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x72>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4013      	ands	r3, r2
 8001a32:	d020      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d107      	bne.n	8001a50 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a58:	2104      	movs	r1, #4
 8001a5a:	4091      	lsls	r1, r2
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d100      	bne.n	8001a6a <HAL_DMA_IRQHandler+0x66>
 8001a68:	e06a      	b.n	8001b40 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	0010      	movs	r0, r2
 8001a72:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a74:	e064      	b.n	8001b40 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	0013      	movs	r3, r2
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	d02b      	beq.n	8001ade <HAL_DMA_IRQHandler+0xda>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d027      	beq.n	8001ade <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2220      	movs	r2, #32
 8001a96:	4013      	ands	r3, r2
 8001a98:	d10b      	bne.n	8001ab2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	210a      	movs	r1, #10
 8001aa6:	438a      	bics	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2221      	movs	r2, #33	@ 0x21
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aba:	2102      	movs	r1, #2
 8001abc:	4091      	lsls	r1, r2
 8001abe:	000a      	movs	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d036      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	0010      	movs	r0, r2
 8001ada:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001adc:	e030      	b.n	8001b40 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	0013      	movs	r3, r2
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4013      	ands	r3, r2
 8001aec:	d028      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x13c>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2208      	movs	r2, #8
 8001af2:	4013      	ands	r3, r2
 8001af4:	d024      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	210e      	movs	r1, #14
 8001b02:	438a      	bics	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4091      	lsls	r1, r2
 8001b12:	000a      	movs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2221      	movs	r2, #33	@ 0x21
 8001b20:	2101      	movs	r1, #1
 8001b22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	0010      	movs	r0, r2
 8001b3c:	4798      	blx	r3
    }
  }
}
 8001b3e:	e7ff      	b.n	8001b40 <HAL_DMA_IRQHandler+0x13c>
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b5e:	2101      	movs	r1, #1
 8001b60:	4091      	lsls	r1, r2
 8001b62:	000a      	movs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b10      	cmp	r3, #16
 8001b74:	d108      	bne.n	8001b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b86:	e007      	b.n	8001b98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	60da      	str	r2, [r3, #12]
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b004      	add	sp, #16
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a08      	ldr	r2, [pc, #32]	@ (8001bd0 <DMA_CalcBaseAndBitshift+0x30>)
 8001bae:	4694      	mov	ip, r2
 8001bb0:	4463      	add	r3, ip
 8001bb2:	2114      	movs	r1, #20
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7fe fab1 	bl	800011c <__udivsi3>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	009a      	lsls	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a03      	ldr	r2, [pc, #12]	@ (8001bd4 <DMA_CalcBaseAndBitshift+0x34>)
 8001bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001bc8:	46c0      	nop			@ (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	bffdfff8 	.word	0xbffdfff8
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	603a      	str	r2, [r7, #0]
 8001be4:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001be6:	2317      	movs	r3, #23
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8001bee:	2316      	movs	r3, #22
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8001bf6:	2315      	movs	r3, #21
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf8 <HAL_FLASH_Program+0x120>)
 8001c00:	7e1b      	ldrb	r3, [r3, #24]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_FLASH_Program+0x32>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e072      	b.n	8001cf0 <HAL_FLASH_Program+0x118>
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf8 <HAL_FLASH_Program+0x120>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c10:	2317      	movs	r3, #23
 8001c12:	18fe      	adds	r6, r7, r3
 8001c14:	4b39      	ldr	r3, [pc, #228]	@ (8001cfc <HAL_FLASH_Program+0x124>)
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 f8c4 	bl	8001da4 <FLASH_WaitForLastOperation>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8001c20:	2317      	movs	r3, #23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d15c      	bne.n	8001ce4 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d104      	bne.n	8001c3a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001c30:	2315      	movs	r3, #21
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e00b      	b.n	8001c52 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d104      	bne.n	8001c4a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001c40:	2315      	movs	r3, #21
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	2202      	movs	r2, #2
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e003      	b.n	8001c52 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001c4a:	2315      	movs	r3, #21
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	2204      	movs	r2, #4
 8001c50:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8001c52:	2316      	movs	r3, #22
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e039      	b.n	8001cd0 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001c5c:	2116      	movs	r1, #22
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	005a      	lsls	r2, r3, #1
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	18d0      	adds	r0, r2, r3
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	001a      	movs	r2, r3
 8001c70:	3a20      	subs	r2, #32
 8001c72:	2a00      	cmp	r2, #0
 8001c74:	db03      	blt.n	8001c7e <HAL_FLASH_Program+0xa6>
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	40d1      	lsrs	r1, r2
 8001c7a:	000c      	movs	r4, r1
 8001c7c:	e008      	b.n	8001c90 <HAL_FLASH_Program+0xb8>
 8001c7e:	2220      	movs	r2, #32
 8001c80:	1ad2      	subs	r2, r2, r3
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4091      	lsls	r1, r2
 8001c86:	000a      	movs	r2, r1
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	40d9      	lsrs	r1, r3
 8001c8c:	000c      	movs	r4, r1
 8001c8e:	4314      	orrs	r4, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	40da      	lsrs	r2, r3
 8001c94:	0015      	movs	r5, r2
 8001c96:	b2a3      	uxth	r3, r4
 8001c98:	0019      	movs	r1, r3
 8001c9a:	f000 f867 	bl	8001d6c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c9e:	2317      	movs	r3, #23
 8001ca0:	18fe      	adds	r6, r7, r3
 8001ca2:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_FLASH_Program+0x124>)
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 f87d 	bl	8001da4 <FLASH_WaitForLastOperation>
 8001caa:	0003      	movs	r3, r0
 8001cac:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_FLASH_Program+0x128>)
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <HAL_FLASH_Program+0x128>)
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	438a      	bics	r2, r1
 8001cb8:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001cba:	2317      	movs	r3, #23
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10e      	bne.n	8001ce2 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8001cc4:	2116      	movs	r1, #22
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	781a      	ldrb	r2, [r3, #0]
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	3201      	adds	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	2316      	movs	r3, #22
 8001cd2:	18fa      	adds	r2, r7, r3
 8001cd4:	2315      	movs	r3, #21
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	7812      	ldrb	r2, [r2, #0]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d3bd      	bcc.n	8001c5c <HAL_FLASH_Program+0x84>
 8001ce0:	e000      	b.n	8001ce4 <HAL_FLASH_Program+0x10c>
      {
        break;
 8001ce2:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <HAL_FLASH_Program+0x120>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	761a      	strb	r2, [r3, #24]

  return status;
 8001cea:	2317      	movs	r3, #23
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	781b      	ldrb	r3, [r3, #0]
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b007      	add	sp, #28
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	20000200 	.word	0x20000200
 8001cfc:	0000c350 	.word	0x0000c350
 8001d00:	40022000 	.word	0x40022000

08001d04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <HAL_FLASH_Unlock+0x40>)
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	4013      	ands	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_FLASH_Unlock+0x40>)
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <HAL_FLASH_Unlock+0x44>)
 8001d1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_FLASH_Unlock+0x40>)
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <HAL_FLASH_Unlock+0x48>)
 8001d24:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <HAL_FLASH_Unlock+0x40>)
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d002      	beq.n	8001d36 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001d30:	1dfb      	adds	r3, r7, #7
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781b      	ldrb	r3, [r3, #0]
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	40022000 	.word	0x40022000
 8001d48:	45670123 	.word	0x45670123
 8001d4c:	cdef89ab 	.word	0xcdef89ab

08001d50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <HAL_FLASH_Lock+0x18>)
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	4b03      	ldr	r3, [pc, #12]	@ (8001d68 <HAL_FLASH_Lock+0x18>)
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40022000 	.word	0x40022000

08001d6c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	000a      	movs	r2, r1
 8001d76:	1cbb      	adds	r3, r7, #2
 8001d78:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <FLASH_Program_HalfWord+0x30>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001d80:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <FLASH_Program_HalfWord+0x34>)
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <FLASH_Program_HalfWord+0x34>)
 8001d86:	2101      	movs	r1, #1
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	1cba      	adds	r2, r7, #2
 8001d90:	8812      	ldrh	r2, [r2, #0]
 8001d92:	801a      	strh	r2, [r3, #0]
}
 8001d94:	46c0      	nop			@ (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b002      	add	sp, #8
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000200 	.word	0x20000200
 8001da0:	40022000 	.word	0x40022000

08001da4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff f8bc 	bl	8000f28 <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001db4:	e00f      	b.n	8001dd6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3301      	adds	r3, #1
 8001dba:	d00c      	beq.n	8001dd6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <FLASH_WaitForLastOperation+0x2e>
 8001dc2:	f7ff f8b1 	bl	8000f28 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d201      	bcs.n	8001dd6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e01f      	b.n	8001e16 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001dd6:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <FLASH_WaitForLastOperation+0x7c>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d0e9      	beq.n	8001db6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001de2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <FLASH_WaitForLastOperation+0x7c>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d102      	bne.n	8001df4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001dee:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <FLASH_WaitForLastOperation+0x7c>)
 8001df0:	2220      	movs	r2, #32
 8001df2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001df4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <FLASH_WaitForLastOperation+0x7c>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d005      	beq.n	8001e0c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001e00:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <FLASH_WaitForLastOperation+0x7c>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2204      	movs	r2, #4
 8001e06:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d103      	bne.n	8001e14 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e0c:	f000 f80a 	bl	8001e24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b004      	add	sp, #16
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	40022000 	.word	0x40022000

08001e24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001e2e:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <FLASH_SetErrorCode+0x58>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2210      	movs	r2, #16
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d109      	bne.n	8001e4e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <FLASH_SetErrorCode+0x5c>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	431a      	orrs	r2, r3
 8001e42:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <FLASH_SetErrorCode+0x5c>)
 8001e44:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2210      	movs	r2, #16
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <FLASH_SetErrorCode+0x58>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2204      	movs	r2, #4
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d109      	bne.n	8001e6e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <FLASH_SetErrorCode+0x5c>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <FLASH_SetErrorCode+0x5c>)
 8001e64:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001e6e:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <FLASH_SetErrorCode+0x58>)
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]
}  
 8001e74:	46c0      	nop			@ (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	20000200 	.word	0x20000200

08001e84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e8e:	230f      	movs	r3, #15
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e9a:	4b32      	ldr	r3, [pc, #200]	@ (8001f64 <HAL_FLASHEx_Erase+0xe0>)
 8001e9c:	7e1b      	ldrb	r3, [r3, #24]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_FLASHEx_Erase+0x22>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e05a      	b.n	8001f5c <HAL_FLASHEx_Erase+0xd8>
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f64 <HAL_FLASHEx_Erase+0xe0>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d116      	bne.n	8001ee2 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <HAL_FLASHEx_Erase+0xe4>)
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7ff ff74 	bl	8001da4 <FLASH_WaitForLastOperation>
 8001ebc:	1e03      	subs	r3, r0, #0
 8001ebe:	d147      	bne.n	8001f50 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001ec0:	f000 f856 	bl	8001f70 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	18fc      	adds	r4, r7, r3
 8001ec8:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <HAL_FLASHEx_Erase+0xe4>)
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7ff ff6a 	bl	8001da4 <FLASH_WaitForLastOperation>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <HAL_FLASHEx_Erase+0xe8>)
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <HAL_FLASHEx_Erase+0xe8>)
 8001eda:	2104      	movs	r1, #4
 8001edc:	438a      	bics	r2, r1
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	e036      	b.n	8001f50 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001ee2:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <HAL_FLASHEx_Erase+0xe4>)
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <FLASH_WaitForLastOperation>
 8001eea:	1e03      	subs	r3, r0, #0
 8001eec:	d130      	bne.n	8001f50 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4252      	negs	r2, r2
 8001ef4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	e01f      	b.n	8001f3e <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f84d 	bl	8001fa0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f06:	250f      	movs	r5, #15
 8001f08:	197c      	adds	r4, r7, r5
 8001f0a:	4b17      	ldr	r3, [pc, #92]	@ (8001f68 <HAL_FLASHEx_Erase+0xe4>)
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff ff49 	bl	8001da4 <FLASH_WaitForLastOperation>
 8001f12:	0003      	movs	r3, r0
 8001f14:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_FLASHEx_Erase+0xe8>)
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <HAL_FLASHEx_Erase+0xe8>)
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	438a      	bics	r2, r1
 8001f20:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001f22:	197b      	adds	r3, r7, r5
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	601a      	str	r2, [r3, #0]
            break;
 8001f30:	e00e      	b.n	8001f50 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2280      	movs	r2, #128	@ 0x80
 8001f36:	00d2      	lsls	r2, r2, #3
 8001f38:	4694      	mov	ip, r2
 8001f3a:	4463      	add	r3, ip
 8001f3c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	029a      	lsls	r2, r3, #10
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3d6      	bcc.n	8001efe <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <HAL_FLASHEx_Erase+0xe0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	761a      	strb	r2, [r3, #24]

  return status;
 8001f56:	230f      	movs	r3, #15
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	781b      	ldrb	r3, [r3, #0]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b004      	add	sp, #16
 8001f62:	bdb0      	pop	{r4, r5, r7, pc}
 8001f64:	20000200 	.word	0x20000200
 8001f68:	0000c350 	.word	0x0000c350
 8001f6c:	40022000 	.word	0x40022000

08001f70 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <FLASH_MassErase+0x28>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <FLASH_MassErase+0x2c>)
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <FLASH_MassErase+0x2c>)
 8001f80:	2104      	movs	r1, #4
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <FLASH_MassErase+0x2c>)
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <FLASH_MassErase+0x2c>)
 8001f8c:	2140      	movs	r1, #64	@ 0x40
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	611a      	str	r2, [r3, #16]
}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000200 	.word	0x20000200
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <FLASH_PageErase+0x34>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <FLASH_PageErase+0x38>)
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <FLASH_PageErase+0x38>)
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <FLASH_PageErase+0x38>)
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <FLASH_PageErase+0x38>)
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <FLASH_PageErase+0x38>)
 8001fc6:	2140      	movs	r1, #64	@ 0x40
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	611a      	str	r2, [r3, #16]
}
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000200 	.word	0x20000200
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	e14f      	b.n	800228c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4091      	lsls	r1, r2
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d100      	bne.n	8002004 <HAL_GPIO_Init+0x28>
 8002002:	e140      	b.n	8002286 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2203      	movs	r2, #3
 800200a:	4013      	ands	r3, r2
 800200c:	2b01      	cmp	r3, #1
 800200e:	d005      	beq.n	800201c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2203      	movs	r2, #3
 8002016:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002018:	2b02      	cmp	r3, #2
 800201a:	d130      	bne.n	800207e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	409a      	lsls	r2, r3
 800202a:	0013      	movs	r3, r2
 800202c:	43da      	mvns	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	0013      	movs	r3, r2
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002052:	2201      	movs	r2, #1
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
 8002058:	0013      	movs	r3, r2
 800205a:	43da      	mvns	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	2201      	movs	r2, #1
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
 8002070:	0013      	movs	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	4013      	ands	r3, r2
 8002086:	2b03      	cmp	r3, #3
 8002088:	d017      	beq.n	80020ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	409a      	lsls	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	43da      	mvns	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	409a      	lsls	r2, r3
 80020ac:	0013      	movs	r3, r2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2203      	movs	r2, #3
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d123      	bne.n	800210e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	58d3      	ldr	r3, [r2, r3]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2207      	movs	r2, #7
 80020d8:	4013      	ands	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	220f      	movs	r2, #15
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	43da      	mvns	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2107      	movs	r1, #7
 80020f2:	400b      	ands	r3, r1
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	409a      	lsls	r2, r3
 80020f8:	0013      	movs	r3, r2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	08da      	lsrs	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3208      	adds	r2, #8
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	6939      	ldr	r1, [r7, #16]
 800210c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2203      	movs	r2, #3
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	43da      	mvns	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2203      	movs	r2, #3
 800212c:	401a      	ands	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	409a      	lsls	r2, r3
 8002134:	0013      	movs	r3, r2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	23c0      	movs	r3, #192	@ 0xc0
 8002148:	029b      	lsls	r3, r3, #10
 800214a:	4013      	ands	r3, r2
 800214c:	d100      	bne.n	8002150 <HAL_GPIO_Init+0x174>
 800214e:	e09a      	b.n	8002286 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002150:	4b54      	ldr	r3, [pc, #336]	@ (80022a4 <HAL_GPIO_Init+0x2c8>)
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	4b53      	ldr	r3, [pc, #332]	@ (80022a4 <HAL_GPIO_Init+0x2c8>)
 8002156:	2101      	movs	r1, #1
 8002158:	430a      	orrs	r2, r1
 800215a:	619a      	str	r2, [r3, #24]
 800215c:	4b51      	ldr	r3, [pc, #324]	@ (80022a4 <HAL_GPIO_Init+0x2c8>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2201      	movs	r2, #1
 8002162:	4013      	ands	r3, r2
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002168:	4a4f      	ldr	r2, [pc, #316]	@ (80022a8 <HAL_GPIO_Init+0x2cc>)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	589b      	ldr	r3, [r3, r2]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2203      	movs	r2, #3
 800217a:	4013      	ands	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	409a      	lsls	r2, r3
 8002182:	0013      	movs	r3, r2
 8002184:	43da      	mvns	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	2390      	movs	r3, #144	@ 0x90
 8002190:	05db      	lsls	r3, r3, #23
 8002192:	429a      	cmp	r2, r3
 8002194:	d013      	beq.n	80021be <HAL_GPIO_Init+0x1e2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a44      	ldr	r2, [pc, #272]	@ (80022ac <HAL_GPIO_Init+0x2d0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00d      	beq.n	80021ba <HAL_GPIO_Init+0x1de>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a43      	ldr	r2, [pc, #268]	@ (80022b0 <HAL_GPIO_Init+0x2d4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d007      	beq.n	80021b6 <HAL_GPIO_Init+0x1da>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a42      	ldr	r2, [pc, #264]	@ (80022b4 <HAL_GPIO_Init+0x2d8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_GPIO_Init+0x1d6>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e004      	b.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021be:	2300      	movs	r3, #0
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	2103      	movs	r1, #3
 80021c4:	400a      	ands	r2, r1
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4093      	lsls	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021d0:	4935      	ldr	r1, [pc, #212]	@ (80022a8 <HAL_GPIO_Init+0x2cc>)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b36      	ldr	r3, [pc, #216]	@ (80022b8 <HAL_GPIO_Init+0x2dc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43da      	mvns	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	035b      	lsls	r3, r3, #13
 80021f6:	4013      	ands	r3, r2
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002202:	4b2d      	ldr	r3, [pc, #180]	@ (80022b8 <HAL_GPIO_Init+0x2dc>)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002208:	4b2b      	ldr	r3, [pc, #172]	@ (80022b8 <HAL_GPIO_Init+0x2dc>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	43da      	mvns	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	039b      	lsls	r3, r3, #14
 8002220:	4013      	ands	r3, r2
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800222c:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <HAL_GPIO_Init+0x2dc>)
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002232:	4b21      	ldr	r3, [pc, #132]	@ (80022b8 <HAL_GPIO_Init+0x2dc>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43da      	mvns	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	029b      	lsls	r3, r3, #10
 800224a:	4013      	ands	r3, r2
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002256:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <HAL_GPIO_Init+0x2dc>)
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <HAL_GPIO_Init+0x2dc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43da      	mvns	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	025b      	lsls	r3, r3, #9
 8002274:	4013      	ands	r3, r2
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002280:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <HAL_GPIO_Init+0x2dc>)
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	40da      	lsrs	r2, r3
 8002294:	1e13      	subs	r3, r2, #0
 8002296:	d000      	beq.n	800229a <HAL_GPIO_Init+0x2be>
 8002298:	e6a8      	b.n	8001fec <HAL_GPIO_Init+0x10>
  } 
}
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b006      	add	sp, #24
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010000 	.word	0x40010000
 80022ac:	48000400 	.word	0x48000400
 80022b0:	48000800 	.word	0x48000800
 80022b4:	48000c00 	.word	0x48000c00
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	0008      	movs	r0, r1
 80022c6:	0011      	movs	r1, r2
 80022c8:	1cbb      	adds	r3, r7, #2
 80022ca:	1c02      	adds	r2, r0, #0
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	1c7b      	adds	r3, r7, #1
 80022d0:	1c0a      	adds	r2, r1, #0
 80022d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d4:	1c7b      	adds	r3, r7, #1
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022dc:	1cbb      	adds	r3, r7, #2
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e4:	e003      	b.n	80022ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022e6:	1cbb      	adds	r3, r7, #2
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b002      	add	sp, #8
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	000a      	movs	r2, r1
 8002300:	1cbb      	adds	r3, r7, #2
 8002302:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800230a:	1cbb      	adds	r3, r7, #2
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	041a      	lsls	r2, r3, #16
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	1cb9      	adds	r1, r7, #2
 800231a:	8809      	ldrh	r1, [r1, #0]
 800231c:	400b      	ands	r3, r1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
}
 8002324:	46c0      	nop			@ (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b004      	add	sp, #16
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e301      	b.n	8002942 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2201      	movs	r2, #1
 8002344:	4013      	ands	r3, r2
 8002346:	d100      	bne.n	800234a <HAL_RCC_OscConfig+0x1e>
 8002348:	e08d      	b.n	8002466 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800234a:	4bc3      	ldr	r3, [pc, #780]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	220c      	movs	r2, #12
 8002350:	4013      	ands	r3, r2
 8002352:	2b04      	cmp	r3, #4
 8002354:	d00e      	beq.n	8002374 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002356:	4bc0      	ldr	r3, [pc, #768]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	220c      	movs	r2, #12
 800235c:	4013      	ands	r3, r2
 800235e:	2b08      	cmp	r3, #8
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x64>
 8002362:	4bbd      	ldr	r3, [pc, #756]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	025b      	lsls	r3, r3, #9
 800236a:	401a      	ands	r2, r3
 800236c:	2380      	movs	r3, #128	@ 0x80
 800236e:	025b      	lsls	r3, r3, #9
 8002370:	429a      	cmp	r2, r3
 8002372:	d10d      	bne.n	8002390 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	4bb8      	ldr	r3, [pc, #736]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2380      	movs	r3, #128	@ 0x80
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	4013      	ands	r3, r2
 800237e:	d100      	bne.n	8002382 <HAL_RCC_OscConfig+0x56>
 8002380:	e070      	b.n	8002464 <HAL_RCC_OscConfig+0x138>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d000      	beq.n	800238c <HAL_RCC_OscConfig+0x60>
 800238a:	e06b      	b.n	8002464 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e2d8      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x7c>
 8002398:	4baf      	ldr	r3, [pc, #700]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4bae      	ldr	r3, [pc, #696]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800239e:	2180      	movs	r1, #128	@ 0x80
 80023a0:	0249      	lsls	r1, r1, #9
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e02f      	b.n	8002408 <HAL_RCC_OscConfig+0xdc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10c      	bne.n	80023ca <HAL_RCC_OscConfig+0x9e>
 80023b0:	4ba9      	ldr	r3, [pc, #676]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4ba8      	ldr	r3, [pc, #672]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023b6:	49a9      	ldr	r1, [pc, #676]	@ (800265c <HAL_RCC_OscConfig+0x330>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	4ba6      	ldr	r3, [pc, #664]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4ba5      	ldr	r3, [pc, #660]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023c2:	49a7      	ldr	r1, [pc, #668]	@ (8002660 <HAL_RCC_OscConfig+0x334>)
 80023c4:	400a      	ands	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e01e      	b.n	8002408 <HAL_RCC_OscConfig+0xdc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d10e      	bne.n	80023f0 <HAL_RCC_OscConfig+0xc4>
 80023d2:	4ba1      	ldr	r3, [pc, #644]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4ba0      	ldr	r3, [pc, #640]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023d8:	2180      	movs	r1, #128	@ 0x80
 80023da:	02c9      	lsls	r1, r1, #11
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023e6:	2180      	movs	r1, #128	@ 0x80
 80023e8:	0249      	lsls	r1, r1, #9
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0xdc>
 80023f0:	4b99      	ldr	r3, [pc, #612]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b98      	ldr	r3, [pc, #608]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023f6:	4999      	ldr	r1, [pc, #612]	@ (800265c <HAL_RCC_OscConfig+0x330>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	4b96      	ldr	r3, [pc, #600]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b95      	ldr	r3, [pc, #596]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002402:	4997      	ldr	r1, [pc, #604]	@ (8002660 <HAL_RCC_OscConfig+0x334>)
 8002404:	400a      	ands	r2, r1
 8002406:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d014      	beq.n	800243a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fd8a 	bl	8000f28 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241a:	f7fe fd85 	bl	8000f28 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b64      	cmp	r3, #100	@ 0x64
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e28a      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242c:	4b8a      	ldr	r3, [pc, #552]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	029b      	lsls	r3, r3, #10
 8002434:	4013      	ands	r3, r2
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0xee>
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7fe fd75 	bl	8000f28 <HAL_GetTick>
 800243e:	0003      	movs	r3, r0
 8002440:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe fd70 	bl	8000f28 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	@ 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e275      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	4b80      	ldr	r3, [pc, #512]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	@ 0x80
 800245c:	029b      	lsls	r3, r3, #10
 800245e:	4013      	ands	r3, r2
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x118>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2202      	movs	r2, #2
 800246c:	4013      	ands	r3, r2
 800246e:	d100      	bne.n	8002472 <HAL_RCC_OscConfig+0x146>
 8002470:	e069      	b.n	8002546 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002472:	4b79      	ldr	r3, [pc, #484]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	220c      	movs	r2, #12
 8002478:	4013      	ands	r3, r2
 800247a:	d00b      	beq.n	8002494 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800247c:	4b76      	ldr	r3, [pc, #472]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	220c      	movs	r2, #12
 8002482:	4013      	ands	r3, r2
 8002484:	2b08      	cmp	r3, #8
 8002486:	d11c      	bne.n	80024c2 <HAL_RCC_OscConfig+0x196>
 8002488:	4b73      	ldr	r3, [pc, #460]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	025b      	lsls	r3, r3, #9
 8002490:	4013      	ands	r3, r2
 8002492:	d116      	bne.n	80024c2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002494:	4b70      	ldr	r3, [pc, #448]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2202      	movs	r2, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x17e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e24b      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	22f8      	movs	r2, #248	@ 0xf8
 80024b0:	4393      	bics	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	00da      	lsls	r2, r3, #3
 80024ba:	4b67      	ldr	r3, [pc, #412]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c0:	e041      	b.n	8002546 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d024      	beq.n	8002514 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ca:	4b63      	ldr	r3, [pc, #396]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b62      	ldr	r3, [pc, #392]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80024d0:	2101      	movs	r1, #1
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fd27 	bl	8000f28 <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e0:	f7fe fd22 	bl	8000f28 <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e227      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b59      	ldr	r3, [pc, #356]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2202      	movs	r2, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	d0f1      	beq.n	80024e0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b56      	ldr	r3, [pc, #344]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	22f8      	movs	r2, #248	@ 0xf8
 8002502:	4393      	bics	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00da      	lsls	r2, r3, #3
 800250c:	4b52      	ldr	r3, [pc, #328]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e018      	b.n	8002546 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002514:	4b50      	ldr	r3, [pc, #320]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b4f      	ldr	r3, [pc, #316]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800251a:	2101      	movs	r1, #1
 800251c:	438a      	bics	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fd02 	bl	8000f28 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252a:	f7fe fcfd 	bl	8000f28 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e202      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253c:	4b46      	ldr	r3, [pc, #280]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2202      	movs	r2, #2
 8002542:	4013      	ands	r3, r2
 8002544:	d1f1      	bne.n	800252a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2208      	movs	r2, #8
 800254c:	4013      	ands	r3, r2
 800254e:	d036      	beq.n	80025be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d019      	beq.n	800258c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002558:	4b3f      	ldr	r3, [pc, #252]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800255a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800255c:	4b3e      	ldr	r3, [pc, #248]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800255e:	2101      	movs	r1, #1
 8002560:	430a      	orrs	r2, r1
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7fe fce0 	bl	8000f28 <HAL_GetTick>
 8002568:	0003      	movs	r3, r0
 800256a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256e:	f7fe fcdb 	bl	8000f28 <HAL_GetTick>
 8002572:	0002      	movs	r2, r0
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1e0      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002580:	4b35      	ldr	r3, [pc, #212]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	2202      	movs	r2, #2
 8002586:	4013      	ands	r3, r2
 8002588:	d0f1      	beq.n	800256e <HAL_RCC_OscConfig+0x242>
 800258a:	e018      	b.n	80025be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258c:	4b32      	ldr	r3, [pc, #200]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800258e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002590:	4b31      	ldr	r3, [pc, #196]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002592:	2101      	movs	r1, #1
 8002594:	438a      	bics	r2, r1
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002598:	f7fe fcc6 	bl	8000f28 <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a2:	f7fe fcc1 	bl	8000f28 <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1c6      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b28      	ldr	r3, [pc, #160]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	2202      	movs	r2, #2
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1f1      	bne.n	80025a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2204      	movs	r2, #4
 80025c4:	4013      	ands	r3, r2
 80025c6:	d100      	bne.n	80025ca <HAL_RCC_OscConfig+0x29e>
 80025c8:	e0b4      	b.n	8002734 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ca:	201f      	movs	r0, #31
 80025cc:	183b      	adds	r3, r7, r0
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	2380      	movs	r3, #128	@ 0x80
 80025d8:	055b      	lsls	r3, r3, #21
 80025da:	4013      	ands	r3, r2
 80025dc:	d110      	bne.n	8002600 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80025e4:	2180      	movs	r1, #128	@ 0x80
 80025e6:	0549      	lsls	r1, r1, #21
 80025e8:	430a      	orrs	r2, r1
 80025ea:	61da      	str	r2, [r3, #28]
 80025ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	055b      	lsls	r3, r3, #21
 80025f4:	4013      	ands	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025fa:	183b      	adds	r3, r7, r0
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4013      	ands	r3, r2
 800260a:	d11a      	bne.n	8002642 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260c:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002612:	2180      	movs	r1, #128	@ 0x80
 8002614:	0049      	lsls	r1, r1, #1
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261a:	f7fe fc85 	bl	8000f28 <HAL_GetTick>
 800261e:	0003      	movs	r3, r0
 8002620:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002624:	f7fe fc80 	bl	8000f28 <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	@ 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e185      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002636:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4013      	ands	r3, r2
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10e      	bne.n	8002668 <HAL_RCC_OscConfig+0x33c>
 800264a:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 800264c:	6a1a      	ldr	r2, [r3, #32]
 800264e:	4b02      	ldr	r3, [pc, #8]	@ (8002658 <HAL_RCC_OscConfig+0x32c>)
 8002650:	2101      	movs	r1, #1
 8002652:	430a      	orrs	r2, r1
 8002654:	621a      	str	r2, [r3, #32]
 8002656:	e035      	b.n	80026c4 <HAL_RCC_OscConfig+0x398>
 8002658:	40021000 	.word	0x40021000
 800265c:	fffeffff 	.word	0xfffeffff
 8002660:	fffbffff 	.word	0xfffbffff
 8002664:	40007000 	.word	0x40007000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10c      	bne.n	800268a <HAL_RCC_OscConfig+0x35e>
 8002670:	4bb6      	ldr	r3, [pc, #728]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	4bb5      	ldr	r3, [pc, #724]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002676:	2101      	movs	r1, #1
 8002678:	438a      	bics	r2, r1
 800267a:	621a      	str	r2, [r3, #32]
 800267c:	4bb3      	ldr	r3, [pc, #716]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800267e:	6a1a      	ldr	r2, [r3, #32]
 8002680:	4bb2      	ldr	r3, [pc, #712]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002682:	2104      	movs	r1, #4
 8002684:	438a      	bics	r2, r1
 8002686:	621a      	str	r2, [r3, #32]
 8002688:	e01c      	b.n	80026c4 <HAL_RCC_OscConfig+0x398>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b05      	cmp	r3, #5
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x380>
 8002692:	4bae      	ldr	r3, [pc, #696]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002694:	6a1a      	ldr	r2, [r3, #32]
 8002696:	4bad      	ldr	r3, [pc, #692]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002698:	2104      	movs	r1, #4
 800269a:	430a      	orrs	r2, r1
 800269c:	621a      	str	r2, [r3, #32]
 800269e:	4bab      	ldr	r3, [pc, #684]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80026a0:	6a1a      	ldr	r2, [r3, #32]
 80026a2:	4baa      	ldr	r3, [pc, #680]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80026a4:	2101      	movs	r1, #1
 80026a6:	430a      	orrs	r2, r1
 80026a8:	621a      	str	r2, [r3, #32]
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0x398>
 80026ac:	4ba7      	ldr	r3, [pc, #668]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80026ae:	6a1a      	ldr	r2, [r3, #32]
 80026b0:	4ba6      	ldr	r3, [pc, #664]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	438a      	bics	r2, r1
 80026b6:	621a      	str	r2, [r3, #32]
 80026b8:	4ba4      	ldr	r3, [pc, #656]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80026ba:	6a1a      	ldr	r2, [r3, #32]
 80026bc:	4ba3      	ldr	r3, [pc, #652]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80026be:	2104      	movs	r1, #4
 80026c0:	438a      	bics	r2, r1
 80026c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d014      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7fe fc2c 	bl	8000f28 <HAL_GetTick>
 80026d0:	0003      	movs	r3, r0
 80026d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	e009      	b.n	80026ea <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fc27 	bl	8000f28 <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	4a9b      	ldr	r2, [pc, #620]	@ (8002950 <HAL_RCC_OscConfig+0x624>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e12b      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	4b98      	ldr	r3, [pc, #608]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	2202      	movs	r2, #2
 80026f0:	4013      	ands	r3, r2
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x3aa>
 80026f4:	e013      	b.n	800271e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7fe fc17 	bl	8000f28 <HAL_GetTick>
 80026fa:	0003      	movs	r3, r0
 80026fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fe:	e009      	b.n	8002714 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe fc12 	bl	8000f28 <HAL_GetTick>
 8002704:	0002      	movs	r2, r0
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	4a91      	ldr	r2, [pc, #580]	@ (8002950 <HAL_RCC_OscConfig+0x624>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e116      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	4b8d      	ldr	r3, [pc, #564]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	2202      	movs	r2, #2
 800271a:	4013      	ands	r3, r2
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800271e:	231f      	movs	r3, #31
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002728:	4b88      	ldr	r3, [pc, #544]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	4b87      	ldr	r3, [pc, #540]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800272e:	4989      	ldr	r1, [pc, #548]	@ (8002954 <HAL_RCC_OscConfig+0x628>)
 8002730:	400a      	ands	r2, r1
 8002732:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2210      	movs	r2, #16
 800273a:	4013      	ands	r3, r2
 800273c:	d063      	beq.n	8002806 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d12a      	bne.n	800279c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002746:	4b81      	ldr	r3, [pc, #516]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800274a:	4b80      	ldr	r3, [pc, #512]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800274c:	2104      	movs	r1, #4
 800274e:	430a      	orrs	r2, r1
 8002750:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002752:	4b7e      	ldr	r3, [pc, #504]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002756:	4b7d      	ldr	r3, [pc, #500]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002758:	2101      	movs	r1, #1
 800275a:	430a      	orrs	r2, r1
 800275c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe fbe3 	bl	8000f28 <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002768:	f7fe fbde 	bl	8000f28 <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e0e3      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800277a:	4b74      	ldr	r3, [pc, #464]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800277c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277e:	2202      	movs	r2, #2
 8002780:	4013      	ands	r3, r2
 8002782:	d0f1      	beq.n	8002768 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002784:	4b71      	ldr	r3, [pc, #452]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002788:	22f8      	movs	r2, #248	@ 0xf8
 800278a:	4393      	bics	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	00da      	lsls	r2, r3, #3
 8002794:	4b6d      	ldr	r3, [pc, #436]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002796:	430a      	orrs	r2, r1
 8002798:	635a      	str	r2, [r3, #52]	@ 0x34
 800279a:	e034      	b.n	8002806 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	3305      	adds	r3, #5
 80027a2:	d111      	bne.n	80027c8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80027a4:	4b69      	ldr	r3, [pc, #420]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80027a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027a8:	4b68      	ldr	r3, [pc, #416]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80027aa:	2104      	movs	r1, #4
 80027ac:	438a      	bics	r2, r1
 80027ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027b0:	4b66      	ldr	r3, [pc, #408]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80027b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b4:	22f8      	movs	r2, #248	@ 0xf8
 80027b6:	4393      	bics	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	00da      	lsls	r2, r3, #3
 80027c0:	4b62      	ldr	r3, [pc, #392]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80027c2:	430a      	orrs	r2, r1
 80027c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027c6:	e01e      	b.n	8002806 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027c8:	4b60      	ldr	r3, [pc, #384]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80027ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027cc:	4b5f      	ldr	r3, [pc, #380]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80027ce:	2104      	movs	r1, #4
 80027d0:	430a      	orrs	r2, r1
 80027d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80027d4:	4b5d      	ldr	r3, [pc, #372]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80027d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027d8:	4b5c      	ldr	r3, [pc, #368]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80027da:	2101      	movs	r1, #1
 80027dc:	438a      	bics	r2, r1
 80027de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e0:	f7fe fba2 	bl	8000f28 <HAL_GetTick>
 80027e4:	0003      	movs	r3, r0
 80027e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027ea:	f7fe fb9d 	bl	8000f28 <HAL_GetTick>
 80027ee:	0002      	movs	r2, r0
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0a2      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027fc:	4b53      	ldr	r3, [pc, #332]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80027fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002800:	2202      	movs	r2, #2
 8002802:	4013      	ands	r3, r2
 8002804:	d1f1      	bne.n	80027ea <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d100      	bne.n	8002810 <HAL_RCC_OscConfig+0x4e4>
 800280e:	e097      	b.n	8002940 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002810:	4b4e      	ldr	r3, [pc, #312]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	220c      	movs	r2, #12
 8002816:	4013      	ands	r3, r2
 8002818:	2b08      	cmp	r3, #8
 800281a:	d100      	bne.n	800281e <HAL_RCC_OscConfig+0x4f2>
 800281c:	e06b      	b.n	80028f6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d14c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b49      	ldr	r3, [pc, #292]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b48      	ldr	r3, [pc, #288]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800282c:	494a      	ldr	r1, [pc, #296]	@ (8002958 <HAL_RCC_OscConfig+0x62c>)
 800282e:	400a      	ands	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe fb79 	bl	8000f28 <HAL_GetTick>
 8002836:	0003      	movs	r3, r0
 8002838:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fb74 	bl	8000f28 <HAL_GetTick>
 8002840:	0002      	movs	r2, r0
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e079      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284e:	4b3f      	ldr	r3, [pc, #252]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	049b      	lsls	r3, r3, #18
 8002856:	4013      	ands	r3, r2
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800285a:	4b3c      	ldr	r3, [pc, #240]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	220f      	movs	r2, #15
 8002860:	4393      	bics	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002868:	4b38      	ldr	r3, [pc, #224]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800286a:	430a      	orrs	r2, r1
 800286c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800286e:	4b37      	ldr	r3, [pc, #220]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a3a      	ldr	r2, [pc, #232]	@ (800295c <HAL_RCC_OscConfig+0x630>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	431a      	orrs	r2, r3
 8002882:	4b32      	ldr	r3, [pc, #200]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002888:	4b30      	ldr	r3, [pc, #192]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b2f      	ldr	r3, [pc, #188]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800288e:	2180      	movs	r1, #128	@ 0x80
 8002890:	0449      	lsls	r1, r1, #17
 8002892:	430a      	orrs	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7fe fb47 	bl	8000f28 <HAL_GetTick>
 800289a:	0003      	movs	r3, r0
 800289c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fb42 	bl	8000f28 <HAL_GetTick>
 80028a4:	0002      	movs	r2, r0
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e047      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b2:	4b26      	ldr	r3, [pc, #152]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	049b      	lsls	r3, r3, #18
 80028ba:	4013      	ands	r3, r2
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x574>
 80028be:	e03f      	b.n	8002940 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c0:	4b22      	ldr	r3, [pc, #136]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80028c6:	4924      	ldr	r1, [pc, #144]	@ (8002958 <HAL_RCC_OscConfig+0x62c>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe fb2c 	bl	8000f28 <HAL_GetTick>
 80028d0:	0003      	movs	r3, r0
 80028d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe fb27 	bl	8000f28 <HAL_GetTick>
 80028da:	0002      	movs	r2, r0
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e02c      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e8:	4b18      	ldr	r3, [pc, #96]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	2380      	movs	r3, #128	@ 0x80
 80028ee:	049b      	lsls	r3, r3, #18
 80028f0:	4013      	ands	r3, r2
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x5aa>
 80028f4:	e024      	b.n	8002940 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e01f      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002902:	4b12      	ldr	r3, [pc, #72]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002908:	4b10      	ldr	r3, [pc, #64]	@ (800294c <HAL_RCC_OscConfig+0x620>)
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	025b      	lsls	r3, r3, #9
 8002914:	401a      	ands	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	429a      	cmp	r2, r3
 800291c:	d10e      	bne.n	800293c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	220f      	movs	r2, #15
 8002922:	401a      	ands	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d107      	bne.n	800293c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	23f0      	movs	r3, #240	@ 0xf0
 8002930:	039b      	lsls	r3, r3, #14
 8002932:	401a      	ands	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b008      	add	sp, #32
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	40021000 	.word	0x40021000
 8002950:	00001388 	.word	0x00001388
 8002954:	efffffff 	.word	0xefffffff
 8002958:	feffffff 	.word	0xfeffffff
 800295c:	ffc2ffff 	.word	0xffc2ffff

08002960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b3      	b.n	8002adc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b5b      	ldr	r3, [pc, #364]	@ (8002ae4 <HAL_RCC_ClockConfig+0x184>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	4013      	ands	r3, r2
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d911      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b58      	ldr	r3, [pc, #352]	@ (8002ae4 <HAL_RCC_ClockConfig+0x184>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2201      	movs	r2, #1
 8002988:	4393      	bics	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	4b55      	ldr	r3, [pc, #340]	@ (8002ae4 <HAL_RCC_ClockConfig+0x184>)
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002994:	4b53      	ldr	r3, [pc, #332]	@ (8002ae4 <HAL_RCC_ClockConfig+0x184>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2201      	movs	r2, #1
 800299a:	4013      	ands	r3, r2
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e09a      	b.n	8002adc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2202      	movs	r2, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d015      	beq.n	80029dc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2204      	movs	r2, #4
 80029b6:	4013      	ands	r3, r2
 80029b8:	d006      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029ba:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 80029c0:	21e0      	movs	r1, #224	@ 0xe0
 80029c2:	00c9      	lsls	r1, r1, #3
 80029c4:	430a      	orrs	r2, r1
 80029c6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c8:	4b47      	ldr	r3, [pc, #284]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	22f0      	movs	r2, #240	@ 0xf0
 80029ce:	4393      	bics	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	4b44      	ldr	r3, [pc, #272]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2201      	movs	r2, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	d040      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	2380      	movs	r3, #128	@ 0x80
 80029f4:	029b      	lsls	r3, r3, #10
 80029f6:	4013      	ands	r3, r2
 80029f8:	d114      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06e      	b.n	8002adc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4b38      	ldr	r3, [pc, #224]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	049b      	lsls	r3, r3, #18
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d108      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e062      	b.n	8002adc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e05b      	b.n	8002adc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a24:	4b30      	ldr	r3, [pc, #192]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2203      	movs	r2, #3
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 8002a34:	430a      	orrs	r2, r1
 8002a36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a38:	f7fe fa76 	bl	8000f28 <HAL_GetTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a40:	e009      	b.n	8002a56 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a42:	f7fe fa71 	bl	8000f28 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	4a27      	ldr	r2, [pc, #156]	@ (8002aec <HAL_RCC_ClockConfig+0x18c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e042      	b.n	8002adc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	4b24      	ldr	r3, [pc, #144]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	401a      	ands	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d1ec      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <HAL_RCC_ClockConfig+0x184>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4013      	ands	r3, r2
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d211      	bcs.n	8002a9a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_RCC_ClockConfig+0x184>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	4393      	bics	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	4b18      	ldr	r3, [pc, #96]	@ (8002ae4 <HAL_RCC_ClockConfig+0x184>)
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a88:	4b16      	ldr	r3, [pc, #88]	@ (8002ae4 <HAL_RCC_ClockConfig+0x184>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e020      	b.n	8002adc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa4:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a11      	ldr	r2, [pc, #68]	@ (8002af0 <HAL_RCC_ClockConfig+0x190>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ab8:	f000 f820 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002abc:	0001      	movs	r1, r0
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_RCC_ClockConfig+0x188>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8002af4 <HAL_RCC_ClockConfig+0x194>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	000a      	movs	r2, r1
 8002ace:	40da      	lsrs	r2, r3
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_RCC_ClockConfig+0x198>)
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fe f9e1 	bl	8000e9c <HAL_InitTick>
  
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b004      	add	sp, #16
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	00001388 	.word	0x00001388
 8002af0:	fffff8ff 	.word	0xfffff8ff
 8002af4:	08004c20 	.word	0x08004c20
 8002af8:	20000004 	.word	0x20000004

08002afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002b16:	4b20      	ldr	r3, [pc, #128]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	220c      	movs	r2, #12
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d002      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x30>
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d003      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x36>
 8002b2a:	e02c      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b2e:	613b      	str	r3, [r7, #16]
      break;
 8002b30:	e02c      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	0c9b      	lsrs	r3, r3, #18
 8002b36:	220f      	movs	r2, #15
 8002b38:	4013      	ands	r3, r2
 8002b3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b3c:	5cd3      	ldrb	r3, [r2, r3]
 8002b3e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b40:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	220f      	movs	r2, #15
 8002b46:	4013      	ands	r3, r2
 8002b48:	4a16      	ldr	r2, [pc, #88]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	2380      	movs	r3, #128	@ 0x80
 8002b52:	025b      	lsls	r3, r3, #9
 8002b54:	4013      	ands	r3, r2
 8002b56:	d009      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4810      	ldr	r0, [pc, #64]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b5c:	f7fd fade 	bl	800011c <__udivsi3>
 8002b60:	0003      	movs	r3, r0
 8002b62:	001a      	movs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4353      	muls	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e009      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	000a      	movs	r2, r1
 8002b70:	0152      	lsls	r2, r2, #5
 8002b72:	1a52      	subs	r2, r2, r1
 8002b74:	0193      	lsls	r3, r2, #6
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	185b      	adds	r3, r3, r1
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	613b      	str	r3, [r7, #16]
      break;
 8002b84:	e002      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b86:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b88:	613b      	str	r3, [r7, #16]
      break;
 8002b8a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b8c:	693b      	ldr	r3, [r7, #16]
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b006      	add	sp, #24
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	007a1200 	.word	0x007a1200
 8002ba0:	08004c38 	.word	0x08004c38
 8002ba4:	08004c48 	.word	0x08004c48

08002ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bac:	4b02      	ldr	r3, [pc, #8]	@ (8002bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002bc0:	f7ff fff2 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bc4:	0001      	movs	r1, r0
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	2207      	movs	r2, #7
 8002bce:	4013      	ands	r3, r2
 8002bd0:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	40d9      	lsrs	r1, r3
 8002bd6:	000b      	movs	r3, r1
}    
 8002bd8:	0018      	movs	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	40021000 	.word	0x40021000
 8002be4:	08004c30 	.word	0x08004c30

08002be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e042      	b.n	8002c80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	223d      	movs	r2, #61	@ 0x3d
 8002bfe:	5c9b      	ldrb	r3, [r3, r2]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	223c      	movs	r2, #60	@ 0x3c
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7fd ff9d 	bl	8000b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	223d      	movs	r2, #61	@ 0x3d
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	0019      	movs	r1, r3
 8002c28:	0010      	movs	r0, r2
 8002c2a:	f000 fa5b 	bl	80030e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2246      	movs	r2, #70	@ 0x46
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	223e      	movs	r2, #62	@ 0x3e
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	223f      	movs	r2, #63	@ 0x3f
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2240      	movs	r2, #64	@ 0x40
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2241      	movs	r2, #65	@ 0x41
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2242      	movs	r2, #66	@ 0x42
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2243      	movs	r2, #67	@ 0x43
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2244      	movs	r2, #68	@ 0x44
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2245      	movs	r2, #69	@ 0x45
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	223d      	movs	r2, #61	@ 0x3d
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	0018      	movs	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b002      	add	sp, #8
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	223d      	movs	r2, #61	@ 0x3d
 8002c94:	5c9b      	ldrb	r3, [r3, r2]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d001      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e035      	b.n	8002d0c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	223d      	movs	r2, #61	@ 0x3d
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	@ (8002d14 <HAL_TIM_Base_Start_IT+0x8c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x4e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a14      	ldr	r2, [pc, #80]	@ (8002d18 <HAL_TIM_Base_Start_IT+0x90>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x4e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a12      	ldr	r2, [pc, #72]	@ (8002d1c <HAL_TIM_Base_Start_IT+0x94>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d111      	bne.n	8002cfa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2207      	movs	r2, #7
 8002cde:	4013      	ands	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d010      	beq.n	8002d0a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	e007      	b.n	8002d0a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b004      	add	sp, #16
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40014000 	.word	0x40014000

08002d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d021      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2202      	movs	r2, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	d01d      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	4252      	negs	r2, r2
 8002d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2203      	movs	r2, #3
 8002d60:	4013      	ands	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 f9a4 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e007      	b.n	8002d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 f997 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 f9a3 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2204      	movs	r2, #4
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	4013      	ands	r3, r2
 8002d92:	d01e      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2205      	movs	r2, #5
 8002d9a:	4252      	negs	r2, r2
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	23c0      	movs	r3, #192	@ 0xc0
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4013      	ands	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 f97d 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002dba:	e007      	b.n	8002dcc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 f970 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 f97c 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d021      	beq.n	8002e1e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	4013      	ands	r3, r2
 8002de0:	d01d      	beq.n	8002e1e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2209      	movs	r2, #9
 8002de8:	4252      	negs	r2, r2
 8002dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2204      	movs	r2, #4
 8002df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 f957 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002e06:	e007      	b.n	8002e18 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 f94a 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 f956 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2210      	movs	r2, #16
 8002e22:	4013      	ands	r3, r2
 8002e24:	d022      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2210      	movs	r2, #16
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d01e      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2211      	movs	r2, #17
 8002e34:	4252      	negs	r2, r2
 8002e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	23c0      	movs	r3, #192	@ 0xc0
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d004      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 f930 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002e54:	e007      	b.n	8002e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 f923 	bl	80030a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 f92f 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d00c      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d008      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2202      	movs	r2, #2
 8002e82:	4252      	negs	r2, r2
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7fd fb8f 	bl	80005ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2280      	movs	r2, #128	@ 0x80
 8002e92:	4013      	ands	r3, r2
 8002e94:	d00c      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d008      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2281      	movs	r2, #129	@ 0x81
 8002ea4:	4252      	negs	r2, r2
 8002ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fa98 	bl	80033e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2240      	movs	r2, #64	@ 0x40
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2240      	movs	r2, #64	@ 0x40
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d008      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2241      	movs	r2, #65	@ 0x41
 8002ec6:	4252      	negs	r2, r2
 8002ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 f901 	bl	80030d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d008      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2221      	movs	r2, #33	@ 0x21
 8002ee8:	4252      	negs	r2, r2
 8002eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fa6e 	bl	80033d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b004      	add	sp, #16
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	230f      	movs	r3, #15
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	223c      	movs	r2, #60	@ 0x3c
 8002f12:	5c9b      	ldrb	r3, [r3, r2]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIM_ConfigClockSource+0x20>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e0bc      	b.n	8003096 <HAL_TIM_ConfigClockSource+0x19a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	223c      	movs	r2, #60	@ 0x3c
 8002f20:	2101      	movs	r1, #1
 8002f22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	223d      	movs	r2, #61	@ 0x3d
 8002f28:	2102      	movs	r1, #2
 8002f2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2277      	movs	r2, #119	@ 0x77
 8002f38:	4393      	bics	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4a58      	ldr	r2, [pc, #352]	@ (80030a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2280      	movs	r2, #128	@ 0x80
 8002f52:	0192      	lsls	r2, r2, #6
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d040      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xde>
 8002f58:	2280      	movs	r2, #128	@ 0x80
 8002f5a:	0192      	lsls	r2, r2, #6
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d900      	bls.n	8002f62 <HAL_TIM_ConfigClockSource+0x66>
 8002f60:	e088      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f62:	2280      	movs	r2, #128	@ 0x80
 8002f64:	0152      	lsls	r2, r2, #5
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d100      	bne.n	8002f6c <HAL_TIM_ConfigClockSource+0x70>
 8002f6a:	e088      	b.n	800307e <HAL_TIM_ConfigClockSource+0x182>
 8002f6c:	2280      	movs	r2, #128	@ 0x80
 8002f6e:	0152      	lsls	r2, r2, #5
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d900      	bls.n	8002f76 <HAL_TIM_ConfigClockSource+0x7a>
 8002f74:	e07e      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f76:	2b70      	cmp	r3, #112	@ 0x70
 8002f78:	d018      	beq.n	8002fac <HAL_TIM_ConfigClockSource+0xb0>
 8002f7a:	d900      	bls.n	8002f7e <HAL_TIM_ConfigClockSource+0x82>
 8002f7c:	e07a      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f7e:	2b60      	cmp	r3, #96	@ 0x60
 8002f80:	d04f      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x126>
 8002f82:	d900      	bls.n	8002f86 <HAL_TIM_ConfigClockSource+0x8a>
 8002f84:	e076      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f86:	2b50      	cmp	r3, #80	@ 0x50
 8002f88:	d03b      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x106>
 8002f8a:	d900      	bls.n	8002f8e <HAL_TIM_ConfigClockSource+0x92>
 8002f8c:	e072      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f8e:	2b40      	cmp	r3, #64	@ 0x40
 8002f90:	d057      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x146>
 8002f92:	d900      	bls.n	8002f96 <HAL_TIM_ConfigClockSource+0x9a>
 8002f94:	e06e      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f96:	2b30      	cmp	r3, #48	@ 0x30
 8002f98:	d063      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x166>
 8002f9a:	d86b      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d060      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x166>
 8002fa0:	d868      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d05d      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x166>
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d05b      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x166>
 8002faa:	e063      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fbc:	f000 f990 	bl	80032e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2277      	movs	r2, #119	@ 0x77
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]
      break;
 8002fd8:	e052      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fea:	f000 f979 	bl	80032e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2180      	movs	r1, #128	@ 0x80
 8002ffa:	01c9      	lsls	r1, r1, #7
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]
      break;
 8003000:	e03e      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300e:	001a      	movs	r2, r3
 8003010:	f000 f8ec 	bl	80031ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2150      	movs	r1, #80	@ 0x50
 800301a:	0018      	movs	r0, r3
 800301c:	f000 f946 	bl	80032ac <TIM_ITRx_SetConfig>
      break;
 8003020:	e02e      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800302e:	001a      	movs	r2, r3
 8003030:	f000 f90a 	bl	8003248 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2160      	movs	r1, #96	@ 0x60
 800303a:	0018      	movs	r0, r3
 800303c:	f000 f936 	bl	80032ac <TIM_ITRx_SetConfig>
      break;
 8003040:	e01e      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304e:	001a      	movs	r2, r3
 8003050:	f000 f8cc 	bl	80031ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2140      	movs	r1, #64	@ 0x40
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f926 	bl	80032ac <TIM_ITRx_SetConfig>
      break;
 8003060:	e00e      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	0019      	movs	r1, r3
 800306c:	0010      	movs	r0, r2
 800306e:	f000 f91d 	bl	80032ac <TIM_ITRx_SetConfig>
      break;
 8003072:	e005      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003074:	230f      	movs	r3, #15
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
      break;
 800307c:	e000      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800307e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	223d      	movs	r2, #61	@ 0x3d
 8003084:	2101      	movs	r1, #1
 8003086:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	223c      	movs	r2, #60	@ 0x3c
 800308c:	2100      	movs	r1, #0
 800308e:	5499      	strb	r1, [r3, r2]

  return status;
 8003090:	230f      	movs	r3, #15
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	781b      	ldrb	r3, [r3, #0]
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b004      	add	sp, #16
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	ffff00ff 	.word	0xffff00ff

080030a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b002      	add	sp, #8
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030dc:	46c0      	nop			@ (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a36      	ldr	r2, [pc, #216]	@ (80031d0 <TIM_Base_SetConfig+0xec>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <TIM_Base_SetConfig+0x20>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a35      	ldr	r2, [pc, #212]	@ (80031d4 <TIM_Base_SetConfig+0xf0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d108      	bne.n	8003116 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2270      	movs	r2, #112	@ 0x70
 8003108:	4393      	bics	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a2d      	ldr	r2, [pc, #180]	@ (80031d0 <TIM_Base_SetConfig+0xec>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <TIM_Base_SetConfig+0x62>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2c      	ldr	r2, [pc, #176]	@ (80031d4 <TIM_Base_SetConfig+0xf0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00f      	beq.n	8003146 <TIM_Base_SetConfig+0x62>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2b      	ldr	r2, [pc, #172]	@ (80031d8 <TIM_Base_SetConfig+0xf4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00b      	beq.n	8003146 <TIM_Base_SetConfig+0x62>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2a      	ldr	r2, [pc, #168]	@ (80031dc <TIM_Base_SetConfig+0xf8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <TIM_Base_SetConfig+0x62>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a29      	ldr	r2, [pc, #164]	@ (80031e0 <TIM_Base_SetConfig+0xfc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d003      	beq.n	8003146 <TIM_Base_SetConfig+0x62>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a28      	ldr	r2, [pc, #160]	@ (80031e4 <TIM_Base_SetConfig+0x100>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d108      	bne.n	8003158 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4a27      	ldr	r2, [pc, #156]	@ (80031e8 <TIM_Base_SetConfig+0x104>)
 800314a:	4013      	ands	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2280      	movs	r2, #128	@ 0x80
 800315c:	4393      	bics	r3, r2
 800315e:	001a      	movs	r2, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a13      	ldr	r2, [pc, #76]	@ (80031d0 <TIM_Base_SetConfig+0xec>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00b      	beq.n	800319e <TIM_Base_SetConfig+0xba>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a14      	ldr	r2, [pc, #80]	@ (80031dc <TIM_Base_SetConfig+0xf8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <TIM_Base_SetConfig+0xba>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a13      	ldr	r2, [pc, #76]	@ (80031e0 <TIM_Base_SetConfig+0xfc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d003      	beq.n	800319e <TIM_Base_SetConfig+0xba>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a12      	ldr	r2, [pc, #72]	@ (80031e4 <TIM_Base_SetConfig+0x100>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d103      	bne.n	80031a6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	2201      	movs	r2, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d106      	bne.n	80031c6 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2201      	movs	r2, #1
 80031be:	4393      	bics	r3, r2
 80031c0:	001a      	movs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	611a      	str	r2, [r3, #16]
  }
}
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b004      	add	sp, #16
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40002000 	.word	0x40002000
 80031dc:	40014000 	.word	0x40014000
 80031e0:	40014400 	.word	0x40014400
 80031e4:	40014800 	.word	0x40014800
 80031e8:	fffffcff 	.word	0xfffffcff

080031ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	2201      	movs	r2, #1
 8003204:	4393      	bics	r3, r2
 8003206:	001a      	movs	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	22f0      	movs	r2, #240	@ 0xf0
 8003216:	4393      	bics	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	220a      	movs	r2, #10
 8003228:	4393      	bics	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	621a      	str	r2, [r3, #32]
}
 8003240:	46c0      	nop			@ (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b006      	add	sp, #24
 8003246:	bd80      	pop	{r7, pc}

08003248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	2210      	movs	r2, #16
 8003260:	4393      	bics	r3, r2
 8003262:	001a      	movs	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <TIM_TI2_ConfigInputStage+0x60>)
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	031b      	lsls	r3, r3, #12
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	22a0      	movs	r2, #160	@ 0xa0
 8003284:	4393      	bics	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	621a      	str	r2, [r3, #32]
}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b006      	add	sp, #24
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	ffff0fff 	.word	0xffff0fff

080032ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2270      	movs	r2, #112	@ 0x70
 80032c0:	4393      	bics	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	2207      	movs	r2, #7
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	609a      	str	r2, [r3, #8]
}
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	b004      	add	sp, #16
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	4a09      	ldr	r2, [pc, #36]	@ (800331c <TIM_ETR_SetConfig+0x3c>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	021a      	lsls	r2, r3, #8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	431a      	orrs	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4313      	orrs	r3, r2
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	46c0      	nop			@ (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b006      	add	sp, #24
 800331a:	bd80      	pop	{r7, pc}
 800331c:	ffff00ff 	.word	0xffff00ff

08003320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	223c      	movs	r2, #60	@ 0x3c
 800332e:	5c9b      	ldrb	r3, [r3, r2]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003334:	2302      	movs	r3, #2
 8003336:	e041      	b.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	223c      	movs	r2, #60	@ 0x3c
 800333c:	2101      	movs	r1, #1
 800333e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	223d      	movs	r2, #61	@ 0x3d
 8003344:	2102      	movs	r1, #2
 8003346:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2270      	movs	r2, #112	@ 0x70
 800335c:	4393      	bics	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a13      	ldr	r2, [pc, #76]	@ (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d009      	beq.n	8003390 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a11      	ldr	r2, [pc, #68]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d004      	beq.n	8003390 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a10      	ldr	r2, [pc, #64]	@ (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d10c      	bne.n	80033aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2280      	movs	r2, #128	@ 0x80
 8003394:	4393      	bics	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	223d      	movs	r2, #61	@ 0x3d
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	223c      	movs	r2, #60	@ 0x3c
 80033b6:	2100      	movs	r1, #0
 80033b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b004      	add	sp, #16
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40014000 	.word	0x40014000

080033d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033d8:	46c0      	nop			@ (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e8:	46c0      	nop			@ (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b002      	add	sp, #8
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e044      	b.n	800348c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2278      	movs	r2, #120	@ 0x78
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0018      	movs	r0, r3
 8003416:	f7fd fbc1 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2224      	movs	r2, #36	@ 0x24
 800341e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2101      	movs	r1, #1
 800342c:	438a      	bics	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	0018      	movs	r0, r3
 800343c:	f000 f96c 	bl	8003718 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0018      	movs	r0, r3
 8003444:	f000 f828 	bl	8003498 <UART_SetConfig>
 8003448:	0003      	movs	r3, r0
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e01c      	b.n	800348c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	490d      	ldr	r1, [pc, #52]	@ (8003494 <HAL_UART_Init+0xa4>)
 800345e:	400a      	ands	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2108      	movs	r1, #8
 800346e:	438a      	bics	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	430a      	orrs	r2, r1
 8003480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 f9fb 	bl	8003880 <UART_CheckIdleState>
 800348a:	0003      	movs	r3, r0
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}
 8003494:	fffff7ff 	.word	0xfffff7ff

08003498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034a0:	231e      	movs	r3, #30
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a8d      	ldr	r2, [pc, #564]	@ (80036fc <UART_SetConfig+0x264>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a88      	ldr	r2, [pc, #544]	@ (8003700 <UART_SetConfig+0x268>)
 80034de:	4013      	ands	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a7f      	ldr	r2, [pc, #508]	@ (8003704 <UART_SetConfig+0x26c>)
 8003506:	4013      	ands	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	430a      	orrs	r2, r1
 8003512:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a7b      	ldr	r2, [pc, #492]	@ (8003708 <UART_SetConfig+0x270>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d127      	bne.n	800356e <UART_SetConfig+0xd6>
 800351e:	4b7b      	ldr	r3, [pc, #492]	@ (800370c <UART_SetConfig+0x274>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	2203      	movs	r2, #3
 8003524:	4013      	ands	r3, r2
 8003526:	2b03      	cmp	r3, #3
 8003528:	d00d      	beq.n	8003546 <UART_SetConfig+0xae>
 800352a:	d81b      	bhi.n	8003564 <UART_SetConfig+0xcc>
 800352c:	2b02      	cmp	r3, #2
 800352e:	d014      	beq.n	800355a <UART_SetConfig+0xc2>
 8003530:	d818      	bhi.n	8003564 <UART_SetConfig+0xcc>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <UART_SetConfig+0xa4>
 8003536:	2b01      	cmp	r3, #1
 8003538:	d00a      	beq.n	8003550 <UART_SetConfig+0xb8>
 800353a:	e013      	b.n	8003564 <UART_SetConfig+0xcc>
 800353c:	231f      	movs	r3, #31
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e021      	b.n	800358a <UART_SetConfig+0xf2>
 8003546:	231f      	movs	r3, #31
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	2202      	movs	r2, #2
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	e01c      	b.n	800358a <UART_SetConfig+0xf2>
 8003550:	231f      	movs	r3, #31
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2204      	movs	r2, #4
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e017      	b.n	800358a <UART_SetConfig+0xf2>
 800355a:	231f      	movs	r3, #31
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	2208      	movs	r2, #8
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e012      	b.n	800358a <UART_SetConfig+0xf2>
 8003564:	231f      	movs	r3, #31
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2210      	movs	r2, #16
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e00d      	b.n	800358a <UART_SetConfig+0xf2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a67      	ldr	r2, [pc, #412]	@ (8003710 <UART_SetConfig+0x278>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d104      	bne.n	8003582 <UART_SetConfig+0xea>
 8003578:	231f      	movs	r3, #31
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e003      	b.n	800358a <UART_SetConfig+0xf2>
 8003582:	231f      	movs	r3, #31
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	2210      	movs	r2, #16
 8003588:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	2380      	movs	r3, #128	@ 0x80
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	429a      	cmp	r2, r3
 8003594:	d15c      	bne.n	8003650 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003596:	231f      	movs	r3, #31
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d015      	beq.n	80035cc <UART_SetConfig+0x134>
 80035a0:	dc18      	bgt.n	80035d4 <UART_SetConfig+0x13c>
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d00d      	beq.n	80035c2 <UART_SetConfig+0x12a>
 80035a6:	dc15      	bgt.n	80035d4 <UART_SetConfig+0x13c>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <UART_SetConfig+0x11a>
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d005      	beq.n	80035bc <UART_SetConfig+0x124>
 80035b0:	e010      	b.n	80035d4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b2:	f7ff fb03 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 80035b6:	0003      	movs	r3, r0
 80035b8:	61bb      	str	r3, [r7, #24]
        break;
 80035ba:	e012      	b.n	80035e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035bc:	4b55      	ldr	r3, [pc, #340]	@ (8003714 <UART_SetConfig+0x27c>)
 80035be:	61bb      	str	r3, [r7, #24]
        break;
 80035c0:	e00f      	b.n	80035e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c2:	f7ff fa9b 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 80035c6:	0003      	movs	r3, r0
 80035c8:	61bb      	str	r3, [r7, #24]
        break;
 80035ca:	e00a      	b.n	80035e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	61bb      	str	r3, [r7, #24]
        break;
 80035d2:	e006      	b.n	80035e2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035d8:	231e      	movs	r3, #30
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
        break;
 80035e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d100      	bne.n	80035ea <UART_SetConfig+0x152>
 80035e8:	e07a      	b.n	80036e0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	005a      	lsls	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	18d2      	adds	r2, r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	0019      	movs	r1, r3
 80035fc:	0010      	movs	r0, r2
 80035fe:	f7fc fd8d 	bl	800011c <__udivsi3>
 8003602:	0003      	movs	r3, r0
 8003604:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b0f      	cmp	r3, #15
 800360a:	d91c      	bls.n	8003646 <UART_SetConfig+0x1ae>
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	2380      	movs	r3, #128	@ 0x80
 8003610:	025b      	lsls	r3, r3, #9
 8003612:	429a      	cmp	r2, r3
 8003614:	d217      	bcs.n	8003646 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	b29a      	uxth	r2, r3
 800361a:	200e      	movs	r0, #14
 800361c:	183b      	adds	r3, r7, r0
 800361e:	210f      	movs	r1, #15
 8003620:	438a      	bics	r2, r1
 8003622:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	2207      	movs	r2, #7
 800362c:	4013      	ands	r3, r2
 800362e:	b299      	uxth	r1, r3
 8003630:	183b      	adds	r3, r7, r0
 8003632:	183a      	adds	r2, r7, r0
 8003634:	8812      	ldrh	r2, [r2, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	183a      	adds	r2, r7, r0
 8003640:	8812      	ldrh	r2, [r2, #0]
 8003642:	60da      	str	r2, [r3, #12]
 8003644:	e04c      	b.n	80036e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003646:	231e      	movs	r3, #30
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e047      	b.n	80036e0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003650:	231f      	movs	r3, #31
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b08      	cmp	r3, #8
 8003658:	d015      	beq.n	8003686 <UART_SetConfig+0x1ee>
 800365a:	dc18      	bgt.n	800368e <UART_SetConfig+0x1f6>
 800365c:	2b04      	cmp	r3, #4
 800365e:	d00d      	beq.n	800367c <UART_SetConfig+0x1e4>
 8003660:	dc15      	bgt.n	800368e <UART_SetConfig+0x1f6>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <UART_SetConfig+0x1d4>
 8003666:	2b02      	cmp	r3, #2
 8003668:	d005      	beq.n	8003676 <UART_SetConfig+0x1de>
 800366a:	e010      	b.n	800368e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800366c:	f7ff faa6 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8003670:	0003      	movs	r3, r0
 8003672:	61bb      	str	r3, [r7, #24]
        break;
 8003674:	e012      	b.n	800369c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003676:	4b27      	ldr	r3, [pc, #156]	@ (8003714 <UART_SetConfig+0x27c>)
 8003678:	61bb      	str	r3, [r7, #24]
        break;
 800367a:	e00f      	b.n	800369c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367c:	f7ff fa3e 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8003680:	0003      	movs	r3, r0
 8003682:	61bb      	str	r3, [r7, #24]
        break;
 8003684:	e00a      	b.n	800369c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003686:	2380      	movs	r3, #128	@ 0x80
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	61bb      	str	r3, [r7, #24]
        break;
 800368c:	e006      	b.n	800369c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003692:	231e      	movs	r3, #30
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]
        break;
 800369a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01e      	beq.n	80036e0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	085a      	lsrs	r2, r3, #1
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	18d2      	adds	r2, r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0019      	movs	r1, r3
 80036b2:	0010      	movs	r0, r2
 80036b4:	f7fc fd32 	bl	800011c <__udivsi3>
 80036b8:	0003      	movs	r3, r0
 80036ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	d90a      	bls.n	80036d8 <UART_SetConfig+0x240>
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	025b      	lsls	r3, r3, #9
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d205      	bcs.n	80036d8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	e003      	b.n	80036e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80036d8:	231e      	movs	r3, #30
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036ec:	231e      	movs	r3, #30
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	781b      	ldrb	r3, [r3, #0]
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b008      	add	sp, #32
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	ffff69f3 	.word	0xffff69f3
 8003700:	ffffcfff 	.word	0xffffcfff
 8003704:	fffff4ff 	.word	0xfffff4ff
 8003708:	40013800 	.word	0x40013800
 800370c:	40021000 	.word	0x40021000
 8003710:	40004400 	.word	0x40004400
 8003714:	007a1200 	.word	0x007a1200

08003718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	2208      	movs	r2, #8
 8003726:	4013      	ands	r3, r2
 8003728:	d00b      	beq.n	8003742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4a4a      	ldr	r2, [pc, #296]	@ (800385c <UART_AdvFeatureConfig+0x144>)
 8003732:	4013      	ands	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	2201      	movs	r2, #1
 8003748:	4013      	ands	r3, r2
 800374a:	d00b      	beq.n	8003764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4a43      	ldr	r2, [pc, #268]	@ (8003860 <UART_AdvFeatureConfig+0x148>)
 8003754:	4013      	ands	r3, r2
 8003756:	0019      	movs	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	2202      	movs	r2, #2
 800376a:	4013      	ands	r3, r2
 800376c:	d00b      	beq.n	8003786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a3b      	ldr	r2, [pc, #236]	@ (8003864 <UART_AdvFeatureConfig+0x14c>)
 8003776:	4013      	ands	r3, r2
 8003778:	0019      	movs	r1, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	2204      	movs	r2, #4
 800378c:	4013      	ands	r3, r2
 800378e:	d00b      	beq.n	80037a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4a34      	ldr	r2, [pc, #208]	@ (8003868 <UART_AdvFeatureConfig+0x150>)
 8003798:	4013      	ands	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	2210      	movs	r2, #16
 80037ae:	4013      	ands	r3, r2
 80037b0:	d00b      	beq.n	80037ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a2c      	ldr	r2, [pc, #176]	@ (800386c <UART_AdvFeatureConfig+0x154>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	2220      	movs	r2, #32
 80037d0:	4013      	ands	r3, r2
 80037d2:	d00b      	beq.n	80037ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4a25      	ldr	r2, [pc, #148]	@ (8003870 <UART_AdvFeatureConfig+0x158>)
 80037dc:	4013      	ands	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	2240      	movs	r2, #64	@ 0x40
 80037f2:	4013      	ands	r3, r2
 80037f4:	d01d      	beq.n	8003832 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003874 <UART_AdvFeatureConfig+0x15c>)
 80037fe:	4013      	ands	r3, r2
 8003800:	0019      	movs	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	035b      	lsls	r3, r3, #13
 8003816:	429a      	cmp	r2, r3
 8003818:	d10b      	bne.n	8003832 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <UART_AdvFeatureConfig+0x160>)
 8003822:	4013      	ands	r3, r2
 8003824:	0019      	movs	r1, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	2280      	movs	r2, #128	@ 0x80
 8003838:	4013      	ands	r3, r2
 800383a:	d00b      	beq.n	8003854 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4a0e      	ldr	r2, [pc, #56]	@ (800387c <UART_AdvFeatureConfig+0x164>)
 8003844:	4013      	ands	r3, r2
 8003846:	0019      	movs	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }
}
 8003854:	46c0      	nop			@ (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}
 800385c:	ffff7fff 	.word	0xffff7fff
 8003860:	fffdffff 	.word	0xfffdffff
 8003864:	fffeffff 	.word	0xfffeffff
 8003868:	fffbffff 	.word	0xfffbffff
 800386c:	ffffefff 	.word	0xffffefff
 8003870:	ffffdfff 	.word	0xffffdfff
 8003874:	ffefffff 	.word	0xffefffff
 8003878:	ff9fffff 	.word	0xff9fffff
 800387c:	fff7ffff 	.word	0xfff7ffff

08003880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b092      	sub	sp, #72	@ 0x48
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2284      	movs	r2, #132	@ 0x84
 800388c:	2100      	movs	r1, #0
 800388e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003890:	f7fd fb4a 	bl	8000f28 <HAL_GetTick>
 8003894:	0003      	movs	r3, r0
 8003896:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2208      	movs	r2, #8
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d12c      	bne.n	8003900 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a8:	2280      	movs	r2, #128	@ 0x80
 80038aa:	0391      	lsls	r1, r2, #14
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4a46      	ldr	r2, [pc, #280]	@ (80039c8 <UART_CheckIdleState+0x148>)
 80038b0:	9200      	str	r2, [sp, #0]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f000 f88c 	bl	80039d0 <UART_WaitOnFlagUntilTimeout>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d021      	beq.n	8003900 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038bc:	f3ef 8310 	mrs	r3, PRIMASK
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038c6:	2301      	movs	r3, #1
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			@ (mov r8, r8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2180      	movs	r1, #128	@ 0x80
 80038de:	438a      	bics	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2278      	movs	r2, #120	@ 0x78
 80038f8:	2100      	movs	r1, #0
 80038fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e05f      	b.n	80039c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2204      	movs	r2, #4
 8003908:	4013      	ands	r3, r2
 800390a:	2b04      	cmp	r3, #4
 800390c:	d146      	bne.n	800399c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800390e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003910:	2280      	movs	r2, #128	@ 0x80
 8003912:	03d1      	lsls	r1, r2, #15
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4a2c      	ldr	r2, [pc, #176]	@ (80039c8 <UART_CheckIdleState+0x148>)
 8003918:	9200      	str	r2, [sp, #0]
 800391a:	2200      	movs	r2, #0
 800391c:	f000 f858 	bl	80039d0 <UART_WaitOnFlagUntilTimeout>
 8003920:	1e03      	subs	r3, r0, #0
 8003922:	d03b      	beq.n	800399c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003924:	f3ef 8310 	mrs	r3, PRIMASK
 8003928:	60fb      	str	r3, [r7, #12]
  return(result);
 800392a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392c:	637b      	str	r3, [r7, #52]	@ 0x34
 800392e:	2301      	movs	r3, #1
 8003930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f383 8810 	msr	PRIMASK, r3
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4921      	ldr	r1, [pc, #132]	@ (80039cc <UART_CheckIdleState+0x14c>)
 8003946:	400a      	ands	r2, r1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f383 8810 	msr	PRIMASK, r3
}
 8003954:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003956:	f3ef 8310 	mrs	r3, PRIMASK
 800395a:	61bb      	str	r3, [r7, #24]
  return(result);
 800395c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003960:	2301      	movs	r3, #1
 8003962:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2101      	movs	r1, #1
 8003978:	438a      	bics	r2, r1
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	f383 8810 	msr	PRIMASK, r3
}
 8003986:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2280      	movs	r2, #128	@ 0x80
 800398c:	2120      	movs	r1, #32
 800398e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2278      	movs	r2, #120	@ 0x78
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e011      	b.n	80039c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2280      	movs	r2, #128	@ 0x80
 80039a6:	2120      	movs	r1, #32
 80039a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2278      	movs	r2, #120	@ 0x78
 80039ba:	2100      	movs	r1, #0
 80039bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b010      	add	sp, #64	@ 0x40
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	01ffffff 	.word	0x01ffffff
 80039cc:	fffffedf 	.word	0xfffffedf

080039d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	1dfb      	adds	r3, r7, #7
 80039de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e0:	e051      	b.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	3301      	adds	r3, #1
 80039e6:	d04e      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e8:	f7fd fa9e 	bl	8000f28 <HAL_GetTick>
 80039ec:	0002      	movs	r2, r0
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d302      	bcc.n	80039fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e051      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d03b      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b80      	cmp	r3, #128	@ 0x80
 8003a12:	d038      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b40      	cmp	r3, #64	@ 0x40
 8003a18:	d035      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	2208      	movs	r2, #8
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d111      	bne.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 f83c 	bl	8003ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2284      	movs	r2, #132	@ 0x84
 8003a3c:	2108      	movs	r1, #8
 8003a3e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2278      	movs	r2, #120	@ 0x78
 8003a44:	2100      	movs	r1, #0
 8003a46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e02c      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	401a      	ands	r2, r3
 8003a58:	2380      	movs	r3, #128	@ 0x80
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d112      	bne.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2280      	movs	r2, #128	@ 0x80
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 f81f 	bl	8003ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2284      	movs	r2, #132	@ 0x84
 8003a76:	2120      	movs	r1, #32
 8003a78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2278      	movs	r2, #120	@ 0x78
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e00f      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	425a      	negs	r2, r3
 8003a96:	4153      	adcs	r3, r2
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	001a      	movs	r2, r3
 8003a9c:	1dfb      	adds	r3, r7, #7
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d09e      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b004      	add	sp, #16
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08e      	sub	sp, #56	@ 0x38
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8003abc:	617b      	str	r3, [r7, #20]
  return(result);
 8003abe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	46c0      	nop			@ (mov r8, r8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4926      	ldr	r1, [pc, #152]	@ (8003b74 <UART_EndRxTransfer+0xc4>)
 8003ada:	400a      	ands	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aea:	f3ef 8310 	mrs	r3, PRIMASK
 8003aee:	623b      	str	r3, [r7, #32]
  return(result);
 8003af0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af4:	2301      	movs	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afa:	f383 8810 	msr	PRIMASK, r3
}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	438a      	bics	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b16:	f383 8810 	msr	PRIMASK, r3
}
 8003b1a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d118      	bne.n	8003b56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b24:	f3ef 8310 	mrs	r3, PRIMASK
 8003b28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b2e:	2301      	movs	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f383 8810 	msr	PRIMASK, r3
}
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2110      	movs	r1, #16
 8003b46:	438a      	bics	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f383 8810 	msr	PRIMASK, r3
}
 8003b54:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2280      	movs	r2, #128	@ 0x80
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b00e      	add	sp, #56	@ 0x38
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	fffffedf 	.word	0xfffffedf

08003b78 <srand>:
 8003b78:	4b11      	ldr	r3, [pc, #68]	@ (8003bc0 <srand+0x48>)
 8003b7a:	b570      	push	{r4, r5, r6, lr}
 8003b7c:	681d      	ldr	r5, [r3, #0]
 8003b7e:	0004      	movs	r4, r0
 8003b80:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <srand+0x3c>
 8003b86:	2018      	movs	r0, #24
 8003b88:	f000 fa60 	bl	800404c <malloc>
 8003b8c:	1e02      	subs	r2, r0, #0
 8003b8e:	6328      	str	r0, [r5, #48]	@ 0x30
 8003b90:	d104      	bne.n	8003b9c <srand+0x24>
 8003b92:	2146      	movs	r1, #70	@ 0x46
 8003b94:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <srand+0x4c>)
 8003b96:	480c      	ldr	r0, [pc, #48]	@ (8003bc8 <srand+0x50>)
 8003b98:	f000 f9f0 	bl	8003f7c <__assert_func>
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <srand+0x54>)
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	6003      	str	r3, [r0, #0]
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <srand+0x58>)
 8003ba4:	6043      	str	r3, [r0, #4]
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <srand+0x5c>)
 8003ba8:	6083      	str	r3, [r0, #8]
 8003baa:	230b      	movs	r3, #11
 8003bac:	8183      	strh	r3, [r0, #12]
 8003bae:	2001      	movs	r0, #1
 8003bb0:	6110      	str	r0, [r2, #16]
 8003bb2:	6151      	str	r1, [r2, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003bb8:	611c      	str	r4, [r3, #16]
 8003bba:	615a      	str	r2, [r3, #20]
 8003bbc:	bd70      	pop	{r4, r5, r6, pc}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	2000001c 	.word	0x2000001c
 8003bc4:	08004c58 	.word	0x08004c58
 8003bc8:	08004c6f 	.word	0x08004c6f
 8003bcc:	abcd330e 	.word	0xabcd330e
 8003bd0:	e66d1234 	.word	0xe66d1234
 8003bd4:	0005deec 	.word	0x0005deec

08003bd8 <rand>:
 8003bd8:	4b16      	ldr	r3, [pc, #88]	@ (8003c34 <rand+0x5c>)
 8003bda:	b510      	push	{r4, lr}
 8003bdc:	681c      	ldr	r4, [r3, #0]
 8003bde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d116      	bne.n	8003c12 <rand+0x3a>
 8003be4:	2018      	movs	r0, #24
 8003be6:	f000 fa31 	bl	800404c <malloc>
 8003bea:	1e02      	subs	r2, r0, #0
 8003bec:	6320      	str	r0, [r4, #48]	@ 0x30
 8003bee:	d104      	bne.n	8003bfa <rand+0x22>
 8003bf0:	2152      	movs	r1, #82	@ 0x52
 8003bf2:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <rand+0x60>)
 8003bf4:	4811      	ldr	r0, [pc, #68]	@ (8003c3c <rand+0x64>)
 8003bf6:	f000 f9c1 	bl	8003f7c <__assert_func>
 8003bfa:	4b11      	ldr	r3, [pc, #68]	@ (8003c40 <rand+0x68>)
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	6003      	str	r3, [r0, #0]
 8003c00:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <rand+0x6c>)
 8003c02:	6043      	str	r3, [r0, #4]
 8003c04:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <rand+0x70>)
 8003c06:	6083      	str	r3, [r0, #8]
 8003c08:	230b      	movs	r3, #11
 8003c0a:	8183      	strh	r3, [r0, #12]
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	6110      	str	r0, [r2, #16]
 8003c10:	6151      	str	r1, [r2, #20]
 8003c12:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8003c14:	4a0d      	ldr	r2, [pc, #52]	@ (8003c4c <rand+0x74>)
 8003c16:	6920      	ldr	r0, [r4, #16]
 8003c18:	6961      	ldr	r1, [r4, #20]
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <rand+0x78>)
 8003c1c:	f7fc fbf4 	bl	8000408 <__aeabi_lmul>
 8003c20:	2201      	movs	r2, #1
 8003c22:	2300      	movs	r3, #0
 8003c24:	1880      	adds	r0, r0, r2
 8003c26:	4159      	adcs	r1, r3
 8003c28:	6120      	str	r0, [r4, #16]
 8003c2a:	6161      	str	r1, [r4, #20]
 8003c2c:	0048      	lsls	r0, r1, #1
 8003c2e:	0840      	lsrs	r0, r0, #1
 8003c30:	bd10      	pop	{r4, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	2000001c 	.word	0x2000001c
 8003c38:	08004c58 	.word	0x08004c58
 8003c3c:	08004c6f 	.word	0x08004c6f
 8003c40:	abcd330e 	.word	0xabcd330e
 8003c44:	e66d1234 	.word	0xe66d1234
 8003c48:	0005deec 	.word	0x0005deec
 8003c4c:	4c957f2d 	.word	0x4c957f2d
 8003c50:	5851f42d 	.word	0x5851f42d

08003c54 <std>:
 8003c54:	2300      	movs	r3, #0
 8003c56:	b510      	push	{r4, lr}
 8003c58:	0004      	movs	r4, r0
 8003c5a:	6003      	str	r3, [r0, #0]
 8003c5c:	6043      	str	r3, [r0, #4]
 8003c5e:	6083      	str	r3, [r0, #8]
 8003c60:	8181      	strh	r1, [r0, #12]
 8003c62:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c64:	81c2      	strh	r2, [r0, #14]
 8003c66:	6103      	str	r3, [r0, #16]
 8003c68:	6143      	str	r3, [r0, #20]
 8003c6a:	6183      	str	r3, [r0, #24]
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	2208      	movs	r2, #8
 8003c70:	305c      	adds	r0, #92	@ 0x5c
 8003c72:	f000 f8ff 	bl	8003e74 <memset>
 8003c76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <std+0x50>)
 8003c78:	6224      	str	r4, [r4, #32]
 8003c7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca8 <std+0x54>)
 8003c7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c80:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <std+0x58>)
 8003c82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c84:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <std+0x5c>)
 8003c86:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c88:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <std+0x60>)
 8003c8a:	429c      	cmp	r4, r3
 8003c8c:	d005      	beq.n	8003c9a <std+0x46>
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <std+0x64>)
 8003c90:	429c      	cmp	r4, r3
 8003c92:	d002      	beq.n	8003c9a <std+0x46>
 8003c94:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <std+0x68>)
 8003c96:	429c      	cmp	r4, r3
 8003c98:	d103      	bne.n	8003ca2 <std+0x4e>
 8003c9a:	0020      	movs	r0, r4
 8003c9c:	3058      	adds	r0, #88	@ 0x58
 8003c9e:	f000 f969 	bl	8003f74 <__retarget_lock_init_recursive>
 8003ca2:	bd10      	pop	{r4, pc}
 8003ca4:	08003ddd 	.word	0x08003ddd
 8003ca8:	08003e05 	.word	0x08003e05
 8003cac:	08003e3d 	.word	0x08003e3d
 8003cb0:	08003e69 	.word	0x08003e69
 8003cb4:	20000220 	.word	0x20000220
 8003cb8:	20000288 	.word	0x20000288
 8003cbc:	200002f0 	.word	0x200002f0

08003cc0 <stdio_exit_handler>:
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	4a03      	ldr	r2, [pc, #12]	@ (8003cd0 <stdio_exit_handler+0x10>)
 8003cc4:	4903      	ldr	r1, [pc, #12]	@ (8003cd4 <stdio_exit_handler+0x14>)
 8003cc6:	4804      	ldr	r0, [pc, #16]	@ (8003cd8 <stdio_exit_handler+0x18>)
 8003cc8:	f000 f86c 	bl	8003da4 <_fwalk_sglue>
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	46c0      	nop			@ (mov r8, r8)
 8003cd0:	20000010 	.word	0x20000010
 8003cd4:	080042d1 	.word	0x080042d1
 8003cd8:	20000020 	.word	0x20000020

08003cdc <cleanup_stdio>:
 8003cdc:	6841      	ldr	r1, [r0, #4]
 8003cde:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <cleanup_stdio+0x30>)
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	0004      	movs	r4, r0
 8003ce4:	4299      	cmp	r1, r3
 8003ce6:	d001      	beq.n	8003cec <cleanup_stdio+0x10>
 8003ce8:	f000 faf2 	bl	80042d0 <_fflush_r>
 8003cec:	68a1      	ldr	r1, [r4, #8]
 8003cee:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <cleanup_stdio+0x34>)
 8003cf0:	4299      	cmp	r1, r3
 8003cf2:	d002      	beq.n	8003cfa <cleanup_stdio+0x1e>
 8003cf4:	0020      	movs	r0, r4
 8003cf6:	f000 faeb 	bl	80042d0 <_fflush_r>
 8003cfa:	68e1      	ldr	r1, [r4, #12]
 8003cfc:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <cleanup_stdio+0x38>)
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	d002      	beq.n	8003d08 <cleanup_stdio+0x2c>
 8003d02:	0020      	movs	r0, r4
 8003d04:	f000 fae4 	bl	80042d0 <_fflush_r>
 8003d08:	bd10      	pop	{r4, pc}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	20000220 	.word	0x20000220
 8003d10:	20000288 	.word	0x20000288
 8003d14:	200002f0 	.word	0x200002f0

08003d18 <global_stdio_init.part.0>:
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <global_stdio_init.part.0+0x28>)
 8003d1c:	4a09      	ldr	r2, [pc, #36]	@ (8003d44 <global_stdio_init.part.0+0x2c>)
 8003d1e:	2104      	movs	r1, #4
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	4809      	ldr	r0, [pc, #36]	@ (8003d48 <global_stdio_init.part.0+0x30>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	f7ff ff95 	bl	8003c54 <std>
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	2109      	movs	r1, #9
 8003d2e:	4807      	ldr	r0, [pc, #28]	@ (8003d4c <global_stdio_init.part.0+0x34>)
 8003d30:	f7ff ff90 	bl	8003c54 <std>
 8003d34:	2202      	movs	r2, #2
 8003d36:	2112      	movs	r1, #18
 8003d38:	4805      	ldr	r0, [pc, #20]	@ (8003d50 <global_stdio_init.part.0+0x38>)
 8003d3a:	f7ff ff8b 	bl	8003c54 <std>
 8003d3e:	bd10      	pop	{r4, pc}
 8003d40:	20000358 	.word	0x20000358
 8003d44:	08003cc1 	.word	0x08003cc1
 8003d48:	20000220 	.word	0x20000220
 8003d4c:	20000288 	.word	0x20000288
 8003d50:	200002f0 	.word	0x200002f0

08003d54 <__sfp_lock_acquire>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	4802      	ldr	r0, [pc, #8]	@ (8003d60 <__sfp_lock_acquire+0xc>)
 8003d58:	f000 f90d 	bl	8003f76 <__retarget_lock_acquire_recursive>
 8003d5c:	bd10      	pop	{r4, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	20000361 	.word	0x20000361

08003d64 <__sfp_lock_release>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4802      	ldr	r0, [pc, #8]	@ (8003d70 <__sfp_lock_release+0xc>)
 8003d68:	f000 f906 	bl	8003f78 <__retarget_lock_release_recursive>
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	20000361 	.word	0x20000361

08003d74 <__sinit>:
 8003d74:	b510      	push	{r4, lr}
 8003d76:	0004      	movs	r4, r0
 8003d78:	f7ff ffec 	bl	8003d54 <__sfp_lock_acquire>
 8003d7c:	6a23      	ldr	r3, [r4, #32]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <__sinit+0x14>
 8003d82:	f7ff ffef 	bl	8003d64 <__sfp_lock_release>
 8003d86:	bd10      	pop	{r4, pc}
 8003d88:	4b04      	ldr	r3, [pc, #16]	@ (8003d9c <__sinit+0x28>)
 8003d8a:	6223      	str	r3, [r4, #32]
 8003d8c:	4b04      	ldr	r3, [pc, #16]	@ (8003da0 <__sinit+0x2c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f6      	bne.n	8003d82 <__sinit+0xe>
 8003d94:	f7ff ffc0 	bl	8003d18 <global_stdio_init.part.0>
 8003d98:	e7f3      	b.n	8003d82 <__sinit+0xe>
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	08003cdd 	.word	0x08003cdd
 8003da0:	20000358 	.word	0x20000358

08003da4 <_fwalk_sglue>:
 8003da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003da6:	0014      	movs	r4, r2
 8003da8:	2600      	movs	r6, #0
 8003daa:	9000      	str	r0, [sp, #0]
 8003dac:	9101      	str	r1, [sp, #4]
 8003dae:	68a5      	ldr	r5, [r4, #8]
 8003db0:	6867      	ldr	r7, [r4, #4]
 8003db2:	3f01      	subs	r7, #1
 8003db4:	d504      	bpl.n	8003dc0 <_fwalk_sglue+0x1c>
 8003db6:	6824      	ldr	r4, [r4, #0]
 8003db8:	2c00      	cmp	r4, #0
 8003dba:	d1f8      	bne.n	8003dae <_fwalk_sglue+0xa>
 8003dbc:	0030      	movs	r0, r6
 8003dbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dc0:	89ab      	ldrh	r3, [r5, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d908      	bls.n	8003dd8 <_fwalk_sglue+0x34>
 8003dc6:	220e      	movs	r2, #14
 8003dc8:	5eab      	ldrsh	r3, [r5, r2]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	d004      	beq.n	8003dd8 <_fwalk_sglue+0x34>
 8003dce:	0029      	movs	r1, r5
 8003dd0:	9800      	ldr	r0, [sp, #0]
 8003dd2:	9b01      	ldr	r3, [sp, #4]
 8003dd4:	4798      	blx	r3
 8003dd6:	4306      	orrs	r6, r0
 8003dd8:	3568      	adds	r5, #104	@ 0x68
 8003dda:	e7ea      	b.n	8003db2 <_fwalk_sglue+0xe>

08003ddc <__sread>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	000c      	movs	r4, r1
 8003de0:	250e      	movs	r5, #14
 8003de2:	5f49      	ldrsh	r1, [r1, r5]
 8003de4:	f000 f874 	bl	8003ed0 <_read_r>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	db03      	blt.n	8003df4 <__sread+0x18>
 8003dec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003dee:	181b      	adds	r3, r3, r0
 8003df0:	6563      	str	r3, [r4, #84]	@ 0x54
 8003df2:	bd70      	pop	{r4, r5, r6, pc}
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	4a02      	ldr	r2, [pc, #8]	@ (8003e00 <__sread+0x24>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	81a3      	strh	r3, [r4, #12]
 8003dfc:	e7f9      	b.n	8003df2 <__sread+0x16>
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	ffffefff 	.word	0xffffefff

08003e04 <__swrite>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	001f      	movs	r7, r3
 8003e08:	898b      	ldrh	r3, [r1, #12]
 8003e0a:	0005      	movs	r5, r0
 8003e0c:	000c      	movs	r4, r1
 8003e0e:	0016      	movs	r6, r2
 8003e10:	05db      	lsls	r3, r3, #23
 8003e12:	d505      	bpl.n	8003e20 <__swrite+0x1c>
 8003e14:	230e      	movs	r3, #14
 8003e16:	5ec9      	ldrsh	r1, [r1, r3]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	f000 f844 	bl	8003ea8 <_lseek_r>
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	4a05      	ldr	r2, [pc, #20]	@ (8003e38 <__swrite+0x34>)
 8003e24:	0028      	movs	r0, r5
 8003e26:	4013      	ands	r3, r2
 8003e28:	81a3      	strh	r3, [r4, #12]
 8003e2a:	0032      	movs	r2, r6
 8003e2c:	230e      	movs	r3, #14
 8003e2e:	5ee1      	ldrsh	r1, [r4, r3]
 8003e30:	003b      	movs	r3, r7
 8003e32:	f000 f861 	bl	8003ef8 <_write_r>
 8003e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e38:	ffffefff 	.word	0xffffefff

08003e3c <__sseek>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	000c      	movs	r4, r1
 8003e40:	250e      	movs	r5, #14
 8003e42:	5f49      	ldrsh	r1, [r1, r5]
 8003e44:	f000 f830 	bl	8003ea8 <_lseek_r>
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	1c42      	adds	r2, r0, #1
 8003e4c:	d103      	bne.n	8003e56 <__sseek+0x1a>
 8003e4e:	4a05      	ldr	r2, [pc, #20]	@ (8003e64 <__sseek+0x28>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	81a3      	strh	r3, [r4, #12]
 8003e54:	bd70      	pop	{r4, r5, r6, pc}
 8003e56:	2280      	movs	r2, #128	@ 0x80
 8003e58:	0152      	lsls	r2, r2, #5
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	81a3      	strh	r3, [r4, #12]
 8003e5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e60:	e7f8      	b.n	8003e54 <__sseek+0x18>
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	ffffefff 	.word	0xffffefff

08003e68 <__sclose>:
 8003e68:	b510      	push	{r4, lr}
 8003e6a:	230e      	movs	r3, #14
 8003e6c:	5ec9      	ldrsh	r1, [r1, r3]
 8003e6e:	f000 f809 	bl	8003e84 <_close_r>
 8003e72:	bd10      	pop	{r4, pc}

08003e74 <memset>:
 8003e74:	0003      	movs	r3, r0
 8003e76:	1882      	adds	r2, r0, r2
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d100      	bne.n	8003e7e <memset+0xa>
 8003e7c:	4770      	bx	lr
 8003e7e:	7019      	strb	r1, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	e7f9      	b.n	8003e78 <memset+0x4>

08003e84 <_close_r>:
 8003e84:	2300      	movs	r3, #0
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	4d06      	ldr	r5, [pc, #24]	@ (8003ea4 <_close_r+0x20>)
 8003e8a:	0004      	movs	r4, r0
 8003e8c:	0008      	movs	r0, r1
 8003e8e:	602b      	str	r3, [r5, #0]
 8003e90:	f7fc ff5e 	bl	8000d50 <_close>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d103      	bne.n	8003ea0 <_close_r+0x1c>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d000      	beq.n	8003ea0 <_close_r+0x1c>
 8003e9e:	6023      	str	r3, [r4, #0]
 8003ea0:	bd70      	pop	{r4, r5, r6, pc}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	2000035c 	.word	0x2000035c

08003ea8 <_lseek_r>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	0004      	movs	r4, r0
 8003eac:	0008      	movs	r0, r1
 8003eae:	0011      	movs	r1, r2
 8003eb0:	001a      	movs	r2, r3
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	4d05      	ldr	r5, [pc, #20]	@ (8003ecc <_lseek_r+0x24>)
 8003eb6:	602b      	str	r3, [r5, #0]
 8003eb8:	f7fc ff6b 	bl	8000d92 <_lseek>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d103      	bne.n	8003ec8 <_lseek_r+0x20>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d000      	beq.n	8003ec8 <_lseek_r+0x20>
 8003ec6:	6023      	str	r3, [r4, #0]
 8003ec8:	bd70      	pop	{r4, r5, r6, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	2000035c 	.word	0x2000035c

08003ed0 <_read_r>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	0004      	movs	r4, r0
 8003ed4:	0008      	movs	r0, r1
 8003ed6:	0011      	movs	r1, r2
 8003ed8:	001a      	movs	r2, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	4d05      	ldr	r5, [pc, #20]	@ (8003ef4 <_read_r+0x24>)
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	f7fc fefd 	bl	8000cde <_read>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d103      	bne.n	8003ef0 <_read_r+0x20>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d000      	beq.n	8003ef0 <_read_r+0x20>
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	2000035c 	.word	0x2000035c

08003ef8 <_write_r>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	0004      	movs	r4, r0
 8003efc:	0008      	movs	r0, r1
 8003efe:	0011      	movs	r1, r2
 8003f00:	001a      	movs	r2, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	4d05      	ldr	r5, [pc, #20]	@ (8003f1c <_write_r+0x24>)
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	f7fc ff06 	bl	8000d18 <_write>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d103      	bne.n	8003f18 <_write_r+0x20>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d000      	beq.n	8003f18 <_write_r+0x20>
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	bd70      	pop	{r4, r5, r6, pc}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	2000035c 	.word	0x2000035c

08003f20 <__errno>:
 8003f20:	4b01      	ldr	r3, [pc, #4]	@ (8003f28 <__errno+0x8>)
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	4770      	bx	lr
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	2000001c 	.word	0x2000001c

08003f2c <__libc_init_array>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	2600      	movs	r6, #0
 8003f30:	4c0c      	ldr	r4, [pc, #48]	@ (8003f64 <__libc_init_array+0x38>)
 8003f32:	4d0d      	ldr	r5, [pc, #52]	@ (8003f68 <__libc_init_array+0x3c>)
 8003f34:	1b64      	subs	r4, r4, r5
 8003f36:	10a4      	asrs	r4, r4, #2
 8003f38:	42a6      	cmp	r6, r4
 8003f3a:	d109      	bne.n	8003f50 <__libc_init_array+0x24>
 8003f3c:	2600      	movs	r6, #0
 8003f3e:	f000 fe63 	bl	8004c08 <_init>
 8003f42:	4c0a      	ldr	r4, [pc, #40]	@ (8003f6c <__libc_init_array+0x40>)
 8003f44:	4d0a      	ldr	r5, [pc, #40]	@ (8003f70 <__libc_init_array+0x44>)
 8003f46:	1b64      	subs	r4, r4, r5
 8003f48:	10a4      	asrs	r4, r4, #2
 8003f4a:	42a6      	cmp	r6, r4
 8003f4c:	d105      	bne.n	8003f5a <__libc_init_array+0x2e>
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	00b3      	lsls	r3, r6, #2
 8003f52:	58eb      	ldr	r3, [r5, r3]
 8003f54:	4798      	blx	r3
 8003f56:	3601      	adds	r6, #1
 8003f58:	e7ee      	b.n	8003f38 <__libc_init_array+0xc>
 8003f5a:	00b3      	lsls	r3, r6, #2
 8003f5c:	58eb      	ldr	r3, [r5, r3]
 8003f5e:	4798      	blx	r3
 8003f60:	3601      	adds	r6, #1
 8003f62:	e7f2      	b.n	8003f4a <__libc_init_array+0x1e>
 8003f64:	08004d38 	.word	0x08004d38
 8003f68:	08004d38 	.word	0x08004d38
 8003f6c:	08004d3c 	.word	0x08004d3c
 8003f70:	08004d38 	.word	0x08004d38

08003f74 <__retarget_lock_init_recursive>:
 8003f74:	4770      	bx	lr

08003f76 <__retarget_lock_acquire_recursive>:
 8003f76:	4770      	bx	lr

08003f78 <__retarget_lock_release_recursive>:
 8003f78:	4770      	bx	lr
	...

08003f7c <__assert_func>:
 8003f7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003f7e:	0014      	movs	r4, r2
 8003f80:	001a      	movs	r2, r3
 8003f82:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <__assert_func+0x2c>)
 8003f84:	0005      	movs	r5, r0
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	000e      	movs	r6, r1
 8003f8a:	68d8      	ldr	r0, [r3, #12]
 8003f8c:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <__assert_func+0x30>)
 8003f8e:	2c00      	cmp	r4, #0
 8003f90:	d101      	bne.n	8003f96 <__assert_func+0x1a>
 8003f92:	4b07      	ldr	r3, [pc, #28]	@ (8003fb0 <__assert_func+0x34>)
 8003f94:	001c      	movs	r4, r3
 8003f96:	4907      	ldr	r1, [pc, #28]	@ (8003fb4 <__assert_func+0x38>)
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	9402      	str	r4, [sp, #8]
 8003f9c:	002b      	movs	r3, r5
 8003f9e:	9600      	str	r6, [sp, #0]
 8003fa0:	f000 f9c2 	bl	8004328 <fiprintf>
 8003fa4:	f000 f9e2 	bl	800436c <abort>
 8003fa8:	2000001c 	.word	0x2000001c
 8003fac:	08004cc7 	.word	0x08004cc7
 8003fb0:	08004d02 	.word	0x08004d02
 8003fb4:	08004cd4 	.word	0x08004cd4

08003fb8 <_free_r>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	0005      	movs	r5, r0
 8003fbc:	1e0c      	subs	r4, r1, #0
 8003fbe:	d010      	beq.n	8003fe2 <_free_r+0x2a>
 8003fc0:	3c04      	subs	r4, #4
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	da00      	bge.n	8003fca <_free_r+0x12>
 8003fc8:	18e4      	adds	r4, r4, r3
 8003fca:	0028      	movs	r0, r5
 8003fcc:	f000 f8ea 	bl	80041a4 <__malloc_lock>
 8003fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004048 <_free_r+0x90>)
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <_free_r+0x2c>
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	6014      	str	r4, [r2, #0]
 8003fdc:	0028      	movs	r0, r5
 8003fde:	f000 f8e9 	bl	80041b4 <__malloc_unlock>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	42a3      	cmp	r3, r4
 8003fe6:	d908      	bls.n	8003ffa <_free_r+0x42>
 8003fe8:	6820      	ldr	r0, [r4, #0]
 8003fea:	1821      	adds	r1, r4, r0
 8003fec:	428b      	cmp	r3, r1
 8003fee:	d1f3      	bne.n	8003fd8 <_free_r+0x20>
 8003ff0:	6819      	ldr	r1, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	1809      	adds	r1, r1, r0
 8003ff6:	6021      	str	r1, [r4, #0]
 8003ff8:	e7ee      	b.n	8003fd8 <_free_r+0x20>
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <_free_r+0x4e>
 8004002:	42a3      	cmp	r3, r4
 8004004:	d9f9      	bls.n	8003ffa <_free_r+0x42>
 8004006:	6811      	ldr	r1, [r2, #0]
 8004008:	1850      	adds	r0, r2, r1
 800400a:	42a0      	cmp	r0, r4
 800400c:	d10b      	bne.n	8004026 <_free_r+0x6e>
 800400e:	6820      	ldr	r0, [r4, #0]
 8004010:	1809      	adds	r1, r1, r0
 8004012:	1850      	adds	r0, r2, r1
 8004014:	6011      	str	r1, [r2, #0]
 8004016:	4283      	cmp	r3, r0
 8004018:	d1e0      	bne.n	8003fdc <_free_r+0x24>
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	1841      	adds	r1, r0, r1
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	6053      	str	r3, [r2, #4]
 8004024:	e7da      	b.n	8003fdc <_free_r+0x24>
 8004026:	42a0      	cmp	r0, r4
 8004028:	d902      	bls.n	8004030 <_free_r+0x78>
 800402a:	230c      	movs	r3, #12
 800402c:	602b      	str	r3, [r5, #0]
 800402e:	e7d5      	b.n	8003fdc <_free_r+0x24>
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	1821      	adds	r1, r4, r0
 8004034:	428b      	cmp	r3, r1
 8004036:	d103      	bne.n	8004040 <_free_r+0x88>
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	1809      	adds	r1, r1, r0
 800403e:	6021      	str	r1, [r4, #0]
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	6054      	str	r4, [r2, #4]
 8004044:	e7ca      	b.n	8003fdc <_free_r+0x24>
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	20000368 	.word	0x20000368

0800404c <malloc>:
 800404c:	b510      	push	{r4, lr}
 800404e:	4b03      	ldr	r3, [pc, #12]	@ (800405c <malloc+0x10>)
 8004050:	0001      	movs	r1, r0
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	f000 f826 	bl	80040a4 <_malloc_r>
 8004058:	bd10      	pop	{r4, pc}
 800405a:	46c0      	nop			@ (mov r8, r8)
 800405c:	2000001c 	.word	0x2000001c

08004060 <sbrk_aligned>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	4e0f      	ldr	r6, [pc, #60]	@ (80040a0 <sbrk_aligned+0x40>)
 8004064:	000d      	movs	r5, r1
 8004066:	6831      	ldr	r1, [r6, #0]
 8004068:	0004      	movs	r4, r0
 800406a:	2900      	cmp	r1, #0
 800406c:	d102      	bne.n	8004074 <sbrk_aligned+0x14>
 800406e:	f000 f96b 	bl	8004348 <_sbrk_r>
 8004072:	6030      	str	r0, [r6, #0]
 8004074:	0029      	movs	r1, r5
 8004076:	0020      	movs	r0, r4
 8004078:	f000 f966 	bl	8004348 <_sbrk_r>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d103      	bne.n	8004088 <sbrk_aligned+0x28>
 8004080:	2501      	movs	r5, #1
 8004082:	426d      	negs	r5, r5
 8004084:	0028      	movs	r0, r5
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	2303      	movs	r3, #3
 800408a:	1cc5      	adds	r5, r0, #3
 800408c:	439d      	bics	r5, r3
 800408e:	42a8      	cmp	r0, r5
 8004090:	d0f8      	beq.n	8004084 <sbrk_aligned+0x24>
 8004092:	1a29      	subs	r1, r5, r0
 8004094:	0020      	movs	r0, r4
 8004096:	f000 f957 	bl	8004348 <_sbrk_r>
 800409a:	3001      	adds	r0, #1
 800409c:	d1f2      	bne.n	8004084 <sbrk_aligned+0x24>
 800409e:	e7ef      	b.n	8004080 <sbrk_aligned+0x20>
 80040a0:	20000364 	.word	0x20000364

080040a4 <_malloc_r>:
 80040a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040a6:	2203      	movs	r2, #3
 80040a8:	1ccb      	adds	r3, r1, #3
 80040aa:	4393      	bics	r3, r2
 80040ac:	3308      	adds	r3, #8
 80040ae:	0005      	movs	r5, r0
 80040b0:	001f      	movs	r7, r3
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d234      	bcs.n	8004120 <_malloc_r+0x7c>
 80040b6:	270c      	movs	r7, #12
 80040b8:	42b9      	cmp	r1, r7
 80040ba:	d833      	bhi.n	8004124 <_malloc_r+0x80>
 80040bc:	0028      	movs	r0, r5
 80040be:	f000 f871 	bl	80041a4 <__malloc_lock>
 80040c2:	4e37      	ldr	r6, [pc, #220]	@ (80041a0 <_malloc_r+0xfc>)
 80040c4:	6833      	ldr	r3, [r6, #0]
 80040c6:	001c      	movs	r4, r3
 80040c8:	2c00      	cmp	r4, #0
 80040ca:	d12f      	bne.n	800412c <_malloc_r+0x88>
 80040cc:	0039      	movs	r1, r7
 80040ce:	0028      	movs	r0, r5
 80040d0:	f7ff ffc6 	bl	8004060 <sbrk_aligned>
 80040d4:	0004      	movs	r4, r0
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	d15f      	bne.n	800419a <_malloc_r+0xf6>
 80040da:	6834      	ldr	r4, [r6, #0]
 80040dc:	9400      	str	r4, [sp, #0]
 80040de:	9b00      	ldr	r3, [sp, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d14a      	bne.n	800417a <_malloc_r+0xd6>
 80040e4:	2c00      	cmp	r4, #0
 80040e6:	d052      	beq.n	800418e <_malloc_r+0xea>
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	0028      	movs	r0, r5
 80040ec:	18e3      	adds	r3, r4, r3
 80040ee:	9900      	ldr	r1, [sp, #0]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	f000 f929 	bl	8004348 <_sbrk_r>
 80040f6:	9b01      	ldr	r3, [sp, #4]
 80040f8:	4283      	cmp	r3, r0
 80040fa:	d148      	bne.n	800418e <_malloc_r+0xea>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	0028      	movs	r0, r5
 8004100:	1aff      	subs	r7, r7, r3
 8004102:	0039      	movs	r1, r7
 8004104:	f7ff ffac 	bl	8004060 <sbrk_aligned>
 8004108:	3001      	adds	r0, #1
 800410a:	d040      	beq.n	800418e <_malloc_r+0xea>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	19db      	adds	r3, r3, r7
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	6833      	ldr	r3, [r6, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	2a00      	cmp	r2, #0
 8004118:	d133      	bne.n	8004182 <_malloc_r+0xde>
 800411a:	9b00      	ldr	r3, [sp, #0]
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	e019      	b.n	8004154 <_malloc_r+0xb0>
 8004120:	2b00      	cmp	r3, #0
 8004122:	dac9      	bge.n	80040b8 <_malloc_r+0x14>
 8004124:	230c      	movs	r3, #12
 8004126:	602b      	str	r3, [r5, #0]
 8004128:	2000      	movs	r0, #0
 800412a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800412c:	6821      	ldr	r1, [r4, #0]
 800412e:	1bc9      	subs	r1, r1, r7
 8004130:	d420      	bmi.n	8004174 <_malloc_r+0xd0>
 8004132:	290b      	cmp	r1, #11
 8004134:	d90a      	bls.n	800414c <_malloc_r+0xa8>
 8004136:	19e2      	adds	r2, r4, r7
 8004138:	6027      	str	r7, [r4, #0]
 800413a:	42a3      	cmp	r3, r4
 800413c:	d104      	bne.n	8004148 <_malloc_r+0xa4>
 800413e:	6032      	str	r2, [r6, #0]
 8004140:	6863      	ldr	r3, [r4, #4]
 8004142:	6011      	str	r1, [r2, #0]
 8004144:	6053      	str	r3, [r2, #4]
 8004146:	e005      	b.n	8004154 <_malloc_r+0xb0>
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	e7f9      	b.n	8004140 <_malloc_r+0x9c>
 800414c:	6862      	ldr	r2, [r4, #4]
 800414e:	42a3      	cmp	r3, r4
 8004150:	d10e      	bne.n	8004170 <_malloc_r+0xcc>
 8004152:	6032      	str	r2, [r6, #0]
 8004154:	0028      	movs	r0, r5
 8004156:	f000 f82d 	bl	80041b4 <__malloc_unlock>
 800415a:	0020      	movs	r0, r4
 800415c:	2207      	movs	r2, #7
 800415e:	300b      	adds	r0, #11
 8004160:	1d23      	adds	r3, r4, #4
 8004162:	4390      	bics	r0, r2
 8004164:	1ac2      	subs	r2, r0, r3
 8004166:	4298      	cmp	r0, r3
 8004168:	d0df      	beq.n	800412a <_malloc_r+0x86>
 800416a:	1a1b      	subs	r3, r3, r0
 800416c:	50a3      	str	r3, [r4, r2]
 800416e:	e7dc      	b.n	800412a <_malloc_r+0x86>
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	e7ef      	b.n	8004154 <_malloc_r+0xb0>
 8004174:	0023      	movs	r3, r4
 8004176:	6864      	ldr	r4, [r4, #4]
 8004178:	e7a6      	b.n	80040c8 <_malloc_r+0x24>
 800417a:	9c00      	ldr	r4, [sp, #0]
 800417c:	6863      	ldr	r3, [r4, #4]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	e7ad      	b.n	80040de <_malloc_r+0x3a>
 8004182:	001a      	movs	r2, r3
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	42a3      	cmp	r3, r4
 8004188:	d1fb      	bne.n	8004182 <_malloc_r+0xde>
 800418a:	2300      	movs	r3, #0
 800418c:	e7da      	b.n	8004144 <_malloc_r+0xa0>
 800418e:	230c      	movs	r3, #12
 8004190:	0028      	movs	r0, r5
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	f000 f80e 	bl	80041b4 <__malloc_unlock>
 8004198:	e7c6      	b.n	8004128 <_malloc_r+0x84>
 800419a:	6007      	str	r7, [r0, #0]
 800419c:	e7da      	b.n	8004154 <_malloc_r+0xb0>
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	20000368 	.word	0x20000368

080041a4 <__malloc_lock>:
 80041a4:	b510      	push	{r4, lr}
 80041a6:	4802      	ldr	r0, [pc, #8]	@ (80041b0 <__malloc_lock+0xc>)
 80041a8:	f7ff fee5 	bl	8003f76 <__retarget_lock_acquire_recursive>
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	20000360 	.word	0x20000360

080041b4 <__malloc_unlock>:
 80041b4:	b510      	push	{r4, lr}
 80041b6:	4802      	ldr	r0, [pc, #8]	@ (80041c0 <__malloc_unlock+0xc>)
 80041b8:	f7ff fede 	bl	8003f78 <__retarget_lock_release_recursive>
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	20000360 	.word	0x20000360

080041c4 <__sflush_r>:
 80041c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041c6:	220c      	movs	r2, #12
 80041c8:	5e8b      	ldrsh	r3, [r1, r2]
 80041ca:	0005      	movs	r5, r0
 80041cc:	000c      	movs	r4, r1
 80041ce:	071a      	lsls	r2, r3, #28
 80041d0:	d456      	bmi.n	8004280 <__sflush_r+0xbc>
 80041d2:	684a      	ldr	r2, [r1, #4]
 80041d4:	2a00      	cmp	r2, #0
 80041d6:	dc02      	bgt.n	80041de <__sflush_r+0x1a>
 80041d8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80041da:	2a00      	cmp	r2, #0
 80041dc:	dd4e      	ble.n	800427c <__sflush_r+0xb8>
 80041de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80041e0:	2f00      	cmp	r7, #0
 80041e2:	d04b      	beq.n	800427c <__sflush_r+0xb8>
 80041e4:	2200      	movs	r2, #0
 80041e6:	2080      	movs	r0, #128	@ 0x80
 80041e8:	682e      	ldr	r6, [r5, #0]
 80041ea:	602a      	str	r2, [r5, #0]
 80041ec:	001a      	movs	r2, r3
 80041ee:	0140      	lsls	r0, r0, #5
 80041f0:	6a21      	ldr	r1, [r4, #32]
 80041f2:	4002      	ands	r2, r0
 80041f4:	4203      	tst	r3, r0
 80041f6:	d033      	beq.n	8004260 <__sflush_r+0x9c>
 80041f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	075b      	lsls	r3, r3, #29
 80041fe:	d506      	bpl.n	800420e <__sflush_r+0x4a>
 8004200:	6863      	ldr	r3, [r4, #4]
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <__sflush_r+0x4a>
 800420a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800420c:	1ad2      	subs	r2, r2, r3
 800420e:	2300      	movs	r3, #0
 8004210:	0028      	movs	r0, r5
 8004212:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004214:	6a21      	ldr	r1, [r4, #32]
 8004216:	47b8      	blx	r7
 8004218:	89a2      	ldrh	r2, [r4, #12]
 800421a:	1c43      	adds	r3, r0, #1
 800421c:	d106      	bne.n	800422c <__sflush_r+0x68>
 800421e:	6829      	ldr	r1, [r5, #0]
 8004220:	291d      	cmp	r1, #29
 8004222:	d846      	bhi.n	80042b2 <__sflush_r+0xee>
 8004224:	4b29      	ldr	r3, [pc, #164]	@ (80042cc <__sflush_r+0x108>)
 8004226:	410b      	asrs	r3, r1
 8004228:	07db      	lsls	r3, r3, #31
 800422a:	d442      	bmi.n	80042b2 <__sflush_r+0xee>
 800422c:	2300      	movs	r3, #0
 800422e:	6063      	str	r3, [r4, #4]
 8004230:	6923      	ldr	r3, [r4, #16]
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	04d2      	lsls	r2, r2, #19
 8004236:	d505      	bpl.n	8004244 <__sflush_r+0x80>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <__sflush_r+0x7e>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d100      	bne.n	8004244 <__sflush_r+0x80>
 8004242:	6560      	str	r0, [r4, #84]	@ 0x54
 8004244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004246:	602e      	str	r6, [r5, #0]
 8004248:	2900      	cmp	r1, #0
 800424a:	d017      	beq.n	800427c <__sflush_r+0xb8>
 800424c:	0023      	movs	r3, r4
 800424e:	3344      	adds	r3, #68	@ 0x44
 8004250:	4299      	cmp	r1, r3
 8004252:	d002      	beq.n	800425a <__sflush_r+0x96>
 8004254:	0028      	movs	r0, r5
 8004256:	f7ff feaf 	bl	8003fb8 <_free_r>
 800425a:	2300      	movs	r3, #0
 800425c:	6363      	str	r3, [r4, #52]	@ 0x34
 800425e:	e00d      	b.n	800427c <__sflush_r+0xb8>
 8004260:	2301      	movs	r3, #1
 8004262:	0028      	movs	r0, r5
 8004264:	47b8      	blx	r7
 8004266:	0002      	movs	r2, r0
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d1c6      	bne.n	80041fa <__sflush_r+0x36>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0c3      	beq.n	80041fa <__sflush_r+0x36>
 8004272:	2b1d      	cmp	r3, #29
 8004274:	d001      	beq.n	800427a <__sflush_r+0xb6>
 8004276:	2b16      	cmp	r3, #22
 8004278:	d11a      	bne.n	80042b0 <__sflush_r+0xec>
 800427a:	602e      	str	r6, [r5, #0]
 800427c:	2000      	movs	r0, #0
 800427e:	e01e      	b.n	80042be <__sflush_r+0xfa>
 8004280:	690e      	ldr	r6, [r1, #16]
 8004282:	2e00      	cmp	r6, #0
 8004284:	d0fa      	beq.n	800427c <__sflush_r+0xb8>
 8004286:	680f      	ldr	r7, [r1, #0]
 8004288:	600e      	str	r6, [r1, #0]
 800428a:	1bba      	subs	r2, r7, r6
 800428c:	9201      	str	r2, [sp, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	079b      	lsls	r3, r3, #30
 8004292:	d100      	bne.n	8004296 <__sflush_r+0xd2>
 8004294:	694a      	ldr	r2, [r1, #20]
 8004296:	60a2      	str	r2, [r4, #8]
 8004298:	9b01      	ldr	r3, [sp, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	ddee      	ble.n	800427c <__sflush_r+0xb8>
 800429e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042a0:	0032      	movs	r2, r6
 80042a2:	001f      	movs	r7, r3
 80042a4:	0028      	movs	r0, r5
 80042a6:	9b01      	ldr	r3, [sp, #4]
 80042a8:	6a21      	ldr	r1, [r4, #32]
 80042aa:	47b8      	blx	r7
 80042ac:	2800      	cmp	r0, #0
 80042ae:	dc07      	bgt.n	80042c0 <__sflush_r+0xfc>
 80042b0:	89a2      	ldrh	r2, [r4, #12]
 80042b2:	2340      	movs	r3, #64	@ 0x40
 80042b4:	2001      	movs	r0, #1
 80042b6:	4313      	orrs	r3, r2
 80042b8:	b21b      	sxth	r3, r3
 80042ba:	81a3      	strh	r3, [r4, #12]
 80042bc:	4240      	negs	r0, r0
 80042be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042c0:	9b01      	ldr	r3, [sp, #4]
 80042c2:	1836      	adds	r6, r6, r0
 80042c4:	1a1b      	subs	r3, r3, r0
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	e7e6      	b.n	8004298 <__sflush_r+0xd4>
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	dfbffffe 	.word	0xdfbffffe

080042d0 <_fflush_r>:
 80042d0:	690b      	ldr	r3, [r1, #16]
 80042d2:	b570      	push	{r4, r5, r6, lr}
 80042d4:	0005      	movs	r5, r0
 80042d6:	000c      	movs	r4, r1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <_fflush_r+0x12>
 80042dc:	2500      	movs	r5, #0
 80042de:	0028      	movs	r0, r5
 80042e0:	bd70      	pop	{r4, r5, r6, pc}
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d004      	beq.n	80042f0 <_fflush_r+0x20>
 80042e6:	6a03      	ldr	r3, [r0, #32]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <_fflush_r+0x20>
 80042ec:	f7ff fd42 	bl	8003d74 <__sinit>
 80042f0:	220c      	movs	r2, #12
 80042f2:	5ea3      	ldrsh	r3, [r4, r2]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f1      	beq.n	80042dc <_fflush_r+0xc>
 80042f8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80042fa:	07d2      	lsls	r2, r2, #31
 80042fc:	d404      	bmi.n	8004308 <_fflush_r+0x38>
 80042fe:	059b      	lsls	r3, r3, #22
 8004300:	d402      	bmi.n	8004308 <_fflush_r+0x38>
 8004302:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004304:	f7ff fe37 	bl	8003f76 <__retarget_lock_acquire_recursive>
 8004308:	0028      	movs	r0, r5
 800430a:	0021      	movs	r1, r4
 800430c:	f7ff ff5a 	bl	80041c4 <__sflush_r>
 8004310:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004312:	0005      	movs	r5, r0
 8004314:	07db      	lsls	r3, r3, #31
 8004316:	d4e2      	bmi.n	80042de <_fflush_r+0xe>
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	059b      	lsls	r3, r3, #22
 800431c:	d4df      	bmi.n	80042de <_fflush_r+0xe>
 800431e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004320:	f7ff fe2a 	bl	8003f78 <__retarget_lock_release_recursive>
 8004324:	e7db      	b.n	80042de <_fflush_r+0xe>
	...

08004328 <fiprintf>:
 8004328:	b40e      	push	{r1, r2, r3}
 800432a:	b517      	push	{r0, r1, r2, r4, lr}
 800432c:	4c05      	ldr	r4, [pc, #20]	@ (8004344 <fiprintf+0x1c>)
 800432e:	ab05      	add	r3, sp, #20
 8004330:	cb04      	ldmia	r3!, {r2}
 8004332:	0001      	movs	r1, r0
 8004334:	6820      	ldr	r0, [r4, #0]
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	f000 f846 	bl	80043c8 <_vfiprintf_r>
 800433c:	bc1e      	pop	{r1, r2, r3, r4}
 800433e:	bc08      	pop	{r3}
 8004340:	b003      	add	sp, #12
 8004342:	4718      	bx	r3
 8004344:	2000001c 	.word	0x2000001c

08004348 <_sbrk_r>:
 8004348:	2300      	movs	r3, #0
 800434a:	b570      	push	{r4, r5, r6, lr}
 800434c:	4d06      	ldr	r5, [pc, #24]	@ (8004368 <_sbrk_r+0x20>)
 800434e:	0004      	movs	r4, r0
 8004350:	0008      	movs	r0, r1
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	f7fc fd28 	bl	8000da8 <_sbrk>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d103      	bne.n	8004364 <_sbrk_r+0x1c>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d000      	beq.n	8004364 <_sbrk_r+0x1c>
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	bd70      	pop	{r4, r5, r6, pc}
 8004366:	46c0      	nop			@ (mov r8, r8)
 8004368:	2000035c 	.word	0x2000035c

0800436c <abort>:
 800436c:	2006      	movs	r0, #6
 800436e:	b510      	push	{r4, lr}
 8004370:	f000 fb8e 	bl	8004a90 <raise>
 8004374:	2001      	movs	r0, #1
 8004376:	f7fc fca5 	bl	8000cc4 <_exit>

0800437a <__sfputc_r>:
 800437a:	6893      	ldr	r3, [r2, #8]
 800437c:	b510      	push	{r4, lr}
 800437e:	3b01      	subs	r3, #1
 8004380:	6093      	str	r3, [r2, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da04      	bge.n	8004390 <__sfputc_r+0x16>
 8004386:	6994      	ldr	r4, [r2, #24]
 8004388:	42a3      	cmp	r3, r4
 800438a:	db07      	blt.n	800439c <__sfputc_r+0x22>
 800438c:	290a      	cmp	r1, #10
 800438e:	d005      	beq.n	800439c <__sfputc_r+0x22>
 8004390:	6813      	ldr	r3, [r2, #0]
 8004392:	1c58      	adds	r0, r3, #1
 8004394:	6010      	str	r0, [r2, #0]
 8004396:	7019      	strb	r1, [r3, #0]
 8004398:	0008      	movs	r0, r1
 800439a:	bd10      	pop	{r4, pc}
 800439c:	f000 faae 	bl	80048fc <__swbuf_r>
 80043a0:	0001      	movs	r1, r0
 80043a2:	e7f9      	b.n	8004398 <__sfputc_r+0x1e>

080043a4 <__sfputs_r>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	0006      	movs	r6, r0
 80043a8:	000f      	movs	r7, r1
 80043aa:	0014      	movs	r4, r2
 80043ac:	18d5      	adds	r5, r2, r3
 80043ae:	42ac      	cmp	r4, r5
 80043b0:	d101      	bne.n	80043b6 <__sfputs_r+0x12>
 80043b2:	2000      	movs	r0, #0
 80043b4:	e007      	b.n	80043c6 <__sfputs_r+0x22>
 80043b6:	7821      	ldrb	r1, [r4, #0]
 80043b8:	003a      	movs	r2, r7
 80043ba:	0030      	movs	r0, r6
 80043bc:	f7ff ffdd 	bl	800437a <__sfputc_r>
 80043c0:	3401      	adds	r4, #1
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	d1f3      	bne.n	80043ae <__sfputs_r+0xa>
 80043c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080043c8 <_vfiprintf_r>:
 80043c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ca:	b0a1      	sub	sp, #132	@ 0x84
 80043cc:	000f      	movs	r7, r1
 80043ce:	0015      	movs	r5, r2
 80043d0:	001e      	movs	r6, r3
 80043d2:	9003      	str	r0, [sp, #12]
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d004      	beq.n	80043e2 <_vfiprintf_r+0x1a>
 80043d8:	6a03      	ldr	r3, [r0, #32]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <_vfiprintf_r+0x1a>
 80043de:	f7ff fcc9 	bl	8003d74 <__sinit>
 80043e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043e4:	07db      	lsls	r3, r3, #31
 80043e6:	d405      	bmi.n	80043f4 <_vfiprintf_r+0x2c>
 80043e8:	89bb      	ldrh	r3, [r7, #12]
 80043ea:	059b      	lsls	r3, r3, #22
 80043ec:	d402      	bmi.n	80043f4 <_vfiprintf_r+0x2c>
 80043ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80043f0:	f7ff fdc1 	bl	8003f76 <__retarget_lock_acquire_recursive>
 80043f4:	89bb      	ldrh	r3, [r7, #12]
 80043f6:	071b      	lsls	r3, r3, #28
 80043f8:	d502      	bpl.n	8004400 <_vfiprintf_r+0x38>
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d113      	bne.n	8004428 <_vfiprintf_r+0x60>
 8004400:	0039      	movs	r1, r7
 8004402:	9803      	ldr	r0, [sp, #12]
 8004404:	f000 fabc 	bl	8004980 <__swsetup_r>
 8004408:	2800      	cmp	r0, #0
 800440a:	d00d      	beq.n	8004428 <_vfiprintf_r+0x60>
 800440c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800440e:	07db      	lsls	r3, r3, #31
 8004410:	d503      	bpl.n	800441a <_vfiprintf_r+0x52>
 8004412:	2001      	movs	r0, #1
 8004414:	4240      	negs	r0, r0
 8004416:	b021      	add	sp, #132	@ 0x84
 8004418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800441a:	89bb      	ldrh	r3, [r7, #12]
 800441c:	059b      	lsls	r3, r3, #22
 800441e:	d4f8      	bmi.n	8004412 <_vfiprintf_r+0x4a>
 8004420:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004422:	f7ff fda9 	bl	8003f78 <__retarget_lock_release_recursive>
 8004426:	e7f4      	b.n	8004412 <_vfiprintf_r+0x4a>
 8004428:	2300      	movs	r3, #0
 800442a:	ac08      	add	r4, sp, #32
 800442c:	6163      	str	r3, [r4, #20]
 800442e:	3320      	adds	r3, #32
 8004430:	7663      	strb	r3, [r4, #25]
 8004432:	3310      	adds	r3, #16
 8004434:	76a3      	strb	r3, [r4, #26]
 8004436:	9607      	str	r6, [sp, #28]
 8004438:	002e      	movs	r6, r5
 800443a:	7833      	ldrb	r3, [r6, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <_vfiprintf_r+0x7c>
 8004440:	2b25      	cmp	r3, #37	@ 0x25
 8004442:	d148      	bne.n	80044d6 <_vfiprintf_r+0x10e>
 8004444:	1b73      	subs	r3, r6, r5
 8004446:	9305      	str	r3, [sp, #20]
 8004448:	42ae      	cmp	r6, r5
 800444a:	d00b      	beq.n	8004464 <_vfiprintf_r+0x9c>
 800444c:	002a      	movs	r2, r5
 800444e:	0039      	movs	r1, r7
 8004450:	9803      	ldr	r0, [sp, #12]
 8004452:	f7ff ffa7 	bl	80043a4 <__sfputs_r>
 8004456:	3001      	adds	r0, #1
 8004458:	d100      	bne.n	800445c <_vfiprintf_r+0x94>
 800445a:	e0ae      	b.n	80045ba <_vfiprintf_r+0x1f2>
 800445c:	6963      	ldr	r3, [r4, #20]
 800445e:	9a05      	ldr	r2, [sp, #20]
 8004460:	189b      	adds	r3, r3, r2
 8004462:	6163      	str	r3, [r4, #20]
 8004464:	7833      	ldrb	r3, [r6, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d100      	bne.n	800446c <_vfiprintf_r+0xa4>
 800446a:	e0a6      	b.n	80045ba <_vfiprintf_r+0x1f2>
 800446c:	2201      	movs	r2, #1
 800446e:	2300      	movs	r3, #0
 8004470:	4252      	negs	r2, r2
 8004472:	6062      	str	r2, [r4, #4]
 8004474:	a904      	add	r1, sp, #16
 8004476:	3254      	adds	r2, #84	@ 0x54
 8004478:	1852      	adds	r2, r2, r1
 800447a:	1c75      	adds	r5, r6, #1
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	60e3      	str	r3, [r4, #12]
 8004480:	60a3      	str	r3, [r4, #8]
 8004482:	7013      	strb	r3, [r2, #0]
 8004484:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004486:	4b59      	ldr	r3, [pc, #356]	@ (80045ec <_vfiprintf_r+0x224>)
 8004488:	2205      	movs	r2, #5
 800448a:	0018      	movs	r0, r3
 800448c:	7829      	ldrb	r1, [r5, #0]
 800448e:	9305      	str	r3, [sp, #20]
 8004490:	f000 fb1e 	bl	8004ad0 <memchr>
 8004494:	1c6e      	adds	r6, r5, #1
 8004496:	2800      	cmp	r0, #0
 8004498:	d11f      	bne.n	80044da <_vfiprintf_r+0x112>
 800449a:	6822      	ldr	r2, [r4, #0]
 800449c:	06d3      	lsls	r3, r2, #27
 800449e:	d504      	bpl.n	80044aa <_vfiprintf_r+0xe2>
 80044a0:	2353      	movs	r3, #83	@ 0x53
 80044a2:	a904      	add	r1, sp, #16
 80044a4:	185b      	adds	r3, r3, r1
 80044a6:	2120      	movs	r1, #32
 80044a8:	7019      	strb	r1, [r3, #0]
 80044aa:	0713      	lsls	r3, r2, #28
 80044ac:	d504      	bpl.n	80044b8 <_vfiprintf_r+0xf0>
 80044ae:	2353      	movs	r3, #83	@ 0x53
 80044b0:	a904      	add	r1, sp, #16
 80044b2:	185b      	adds	r3, r3, r1
 80044b4:	212b      	movs	r1, #43	@ 0x2b
 80044b6:	7019      	strb	r1, [r3, #0]
 80044b8:	782b      	ldrb	r3, [r5, #0]
 80044ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80044bc:	d016      	beq.n	80044ec <_vfiprintf_r+0x124>
 80044be:	002e      	movs	r6, r5
 80044c0:	2100      	movs	r1, #0
 80044c2:	200a      	movs	r0, #10
 80044c4:	68e3      	ldr	r3, [r4, #12]
 80044c6:	7832      	ldrb	r2, [r6, #0]
 80044c8:	1c75      	adds	r5, r6, #1
 80044ca:	3a30      	subs	r2, #48	@ 0x30
 80044cc:	2a09      	cmp	r2, #9
 80044ce:	d950      	bls.n	8004572 <_vfiprintf_r+0x1aa>
 80044d0:	2900      	cmp	r1, #0
 80044d2:	d111      	bne.n	80044f8 <_vfiprintf_r+0x130>
 80044d4:	e017      	b.n	8004506 <_vfiprintf_r+0x13e>
 80044d6:	3601      	adds	r6, #1
 80044d8:	e7af      	b.n	800443a <_vfiprintf_r+0x72>
 80044da:	9b05      	ldr	r3, [sp, #20]
 80044dc:	6822      	ldr	r2, [r4, #0]
 80044de:	1ac0      	subs	r0, r0, r3
 80044e0:	2301      	movs	r3, #1
 80044e2:	4083      	lsls	r3, r0
 80044e4:	4313      	orrs	r3, r2
 80044e6:	0035      	movs	r5, r6
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	e7cc      	b.n	8004486 <_vfiprintf_r+0xbe>
 80044ec:	9b07      	ldr	r3, [sp, #28]
 80044ee:	1d19      	adds	r1, r3, #4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	9107      	str	r1, [sp, #28]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	db01      	blt.n	80044fc <_vfiprintf_r+0x134>
 80044f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044fa:	e004      	b.n	8004506 <_vfiprintf_r+0x13e>
 80044fc:	425b      	negs	r3, r3
 80044fe:	60e3      	str	r3, [r4, #12]
 8004500:	2302      	movs	r3, #2
 8004502:	4313      	orrs	r3, r2
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	7833      	ldrb	r3, [r6, #0]
 8004508:	2b2e      	cmp	r3, #46	@ 0x2e
 800450a:	d10c      	bne.n	8004526 <_vfiprintf_r+0x15e>
 800450c:	7873      	ldrb	r3, [r6, #1]
 800450e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004510:	d134      	bne.n	800457c <_vfiprintf_r+0x1b4>
 8004512:	9b07      	ldr	r3, [sp, #28]
 8004514:	3602      	adds	r6, #2
 8004516:	1d1a      	adds	r2, r3, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	9207      	str	r2, [sp, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	da01      	bge.n	8004524 <_vfiprintf_r+0x15c>
 8004520:	2301      	movs	r3, #1
 8004522:	425b      	negs	r3, r3
 8004524:	9309      	str	r3, [sp, #36]	@ 0x24
 8004526:	4d32      	ldr	r5, [pc, #200]	@ (80045f0 <_vfiprintf_r+0x228>)
 8004528:	2203      	movs	r2, #3
 800452a:	0028      	movs	r0, r5
 800452c:	7831      	ldrb	r1, [r6, #0]
 800452e:	f000 facf 	bl	8004ad0 <memchr>
 8004532:	2800      	cmp	r0, #0
 8004534:	d006      	beq.n	8004544 <_vfiprintf_r+0x17c>
 8004536:	2340      	movs	r3, #64	@ 0x40
 8004538:	1b40      	subs	r0, r0, r5
 800453a:	4083      	lsls	r3, r0
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	3601      	adds	r6, #1
 8004540:	4313      	orrs	r3, r2
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	7831      	ldrb	r1, [r6, #0]
 8004546:	2206      	movs	r2, #6
 8004548:	482a      	ldr	r0, [pc, #168]	@ (80045f4 <_vfiprintf_r+0x22c>)
 800454a:	1c75      	adds	r5, r6, #1
 800454c:	7621      	strb	r1, [r4, #24]
 800454e:	f000 fabf 	bl	8004ad0 <memchr>
 8004552:	2800      	cmp	r0, #0
 8004554:	d040      	beq.n	80045d8 <_vfiprintf_r+0x210>
 8004556:	4b28      	ldr	r3, [pc, #160]	@ (80045f8 <_vfiprintf_r+0x230>)
 8004558:	2b00      	cmp	r3, #0
 800455a:	d122      	bne.n	80045a2 <_vfiprintf_r+0x1da>
 800455c:	2207      	movs	r2, #7
 800455e:	9b07      	ldr	r3, [sp, #28]
 8004560:	3307      	adds	r3, #7
 8004562:	4393      	bics	r3, r2
 8004564:	3308      	adds	r3, #8
 8004566:	9307      	str	r3, [sp, #28]
 8004568:	6963      	ldr	r3, [r4, #20]
 800456a:	9a04      	ldr	r2, [sp, #16]
 800456c:	189b      	adds	r3, r3, r2
 800456e:	6163      	str	r3, [r4, #20]
 8004570:	e762      	b.n	8004438 <_vfiprintf_r+0x70>
 8004572:	4343      	muls	r3, r0
 8004574:	002e      	movs	r6, r5
 8004576:	2101      	movs	r1, #1
 8004578:	189b      	adds	r3, r3, r2
 800457a:	e7a4      	b.n	80044c6 <_vfiprintf_r+0xfe>
 800457c:	2300      	movs	r3, #0
 800457e:	200a      	movs	r0, #10
 8004580:	0019      	movs	r1, r3
 8004582:	3601      	adds	r6, #1
 8004584:	6063      	str	r3, [r4, #4]
 8004586:	7832      	ldrb	r2, [r6, #0]
 8004588:	1c75      	adds	r5, r6, #1
 800458a:	3a30      	subs	r2, #48	@ 0x30
 800458c:	2a09      	cmp	r2, #9
 800458e:	d903      	bls.n	8004598 <_vfiprintf_r+0x1d0>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0c8      	beq.n	8004526 <_vfiprintf_r+0x15e>
 8004594:	9109      	str	r1, [sp, #36]	@ 0x24
 8004596:	e7c6      	b.n	8004526 <_vfiprintf_r+0x15e>
 8004598:	4341      	muls	r1, r0
 800459a:	002e      	movs	r6, r5
 800459c:	2301      	movs	r3, #1
 800459e:	1889      	adds	r1, r1, r2
 80045a0:	e7f1      	b.n	8004586 <_vfiprintf_r+0x1be>
 80045a2:	aa07      	add	r2, sp, #28
 80045a4:	9200      	str	r2, [sp, #0]
 80045a6:	0021      	movs	r1, r4
 80045a8:	003a      	movs	r2, r7
 80045aa:	4b14      	ldr	r3, [pc, #80]	@ (80045fc <_vfiprintf_r+0x234>)
 80045ac:	9803      	ldr	r0, [sp, #12]
 80045ae:	e000      	b.n	80045b2 <_vfiprintf_r+0x1ea>
 80045b0:	bf00      	nop
 80045b2:	9004      	str	r0, [sp, #16]
 80045b4:	9b04      	ldr	r3, [sp, #16]
 80045b6:	3301      	adds	r3, #1
 80045b8:	d1d6      	bne.n	8004568 <_vfiprintf_r+0x1a0>
 80045ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045bc:	07db      	lsls	r3, r3, #31
 80045be:	d405      	bmi.n	80045cc <_vfiprintf_r+0x204>
 80045c0:	89bb      	ldrh	r3, [r7, #12]
 80045c2:	059b      	lsls	r3, r3, #22
 80045c4:	d402      	bmi.n	80045cc <_vfiprintf_r+0x204>
 80045c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80045c8:	f7ff fcd6 	bl	8003f78 <__retarget_lock_release_recursive>
 80045cc:	89bb      	ldrh	r3, [r7, #12]
 80045ce:	065b      	lsls	r3, r3, #25
 80045d0:	d500      	bpl.n	80045d4 <_vfiprintf_r+0x20c>
 80045d2:	e71e      	b.n	8004412 <_vfiprintf_r+0x4a>
 80045d4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80045d6:	e71e      	b.n	8004416 <_vfiprintf_r+0x4e>
 80045d8:	aa07      	add	r2, sp, #28
 80045da:	9200      	str	r2, [sp, #0]
 80045dc:	0021      	movs	r1, r4
 80045de:	003a      	movs	r2, r7
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <_vfiprintf_r+0x234>)
 80045e2:	9803      	ldr	r0, [sp, #12]
 80045e4:	f000 f87c 	bl	80046e0 <_printf_i>
 80045e8:	e7e3      	b.n	80045b2 <_vfiprintf_r+0x1ea>
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	08004d03 	.word	0x08004d03
 80045f0:	08004d09 	.word	0x08004d09
 80045f4:	08004d0d 	.word	0x08004d0d
 80045f8:	00000000 	.word	0x00000000
 80045fc:	080043a5 	.word	0x080043a5

08004600 <_printf_common>:
 8004600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004602:	0016      	movs	r6, r2
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	688a      	ldr	r2, [r1, #8]
 8004608:	690b      	ldr	r3, [r1, #16]
 800460a:	000c      	movs	r4, r1
 800460c:	9000      	str	r0, [sp, #0]
 800460e:	4293      	cmp	r3, r2
 8004610:	da00      	bge.n	8004614 <_printf_common+0x14>
 8004612:	0013      	movs	r3, r2
 8004614:	0022      	movs	r2, r4
 8004616:	6033      	str	r3, [r6, #0]
 8004618:	3243      	adds	r2, #67	@ 0x43
 800461a:	7812      	ldrb	r2, [r2, #0]
 800461c:	2a00      	cmp	r2, #0
 800461e:	d001      	beq.n	8004624 <_printf_common+0x24>
 8004620:	3301      	adds	r3, #1
 8004622:	6033      	str	r3, [r6, #0]
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	069b      	lsls	r3, r3, #26
 8004628:	d502      	bpl.n	8004630 <_printf_common+0x30>
 800462a:	6833      	ldr	r3, [r6, #0]
 800462c:	3302      	adds	r3, #2
 800462e:	6033      	str	r3, [r6, #0]
 8004630:	6822      	ldr	r2, [r4, #0]
 8004632:	2306      	movs	r3, #6
 8004634:	0015      	movs	r5, r2
 8004636:	401d      	ands	r5, r3
 8004638:	421a      	tst	r2, r3
 800463a:	d027      	beq.n	800468c <_printf_common+0x8c>
 800463c:	0023      	movs	r3, r4
 800463e:	3343      	adds	r3, #67	@ 0x43
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	1e5a      	subs	r2, r3, #1
 8004644:	4193      	sbcs	r3, r2
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	0692      	lsls	r2, r2, #26
 800464a:	d430      	bmi.n	80046ae <_printf_common+0xae>
 800464c:	0022      	movs	r2, r4
 800464e:	9901      	ldr	r1, [sp, #4]
 8004650:	9800      	ldr	r0, [sp, #0]
 8004652:	9d08      	ldr	r5, [sp, #32]
 8004654:	3243      	adds	r2, #67	@ 0x43
 8004656:	47a8      	blx	r5
 8004658:	3001      	adds	r0, #1
 800465a:	d025      	beq.n	80046a8 <_printf_common+0xa8>
 800465c:	2206      	movs	r2, #6
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	2500      	movs	r5, #0
 8004662:	4013      	ands	r3, r2
 8004664:	2b04      	cmp	r3, #4
 8004666:	d105      	bne.n	8004674 <_printf_common+0x74>
 8004668:	6833      	ldr	r3, [r6, #0]
 800466a:	68e5      	ldr	r5, [r4, #12]
 800466c:	1aed      	subs	r5, r5, r3
 800466e:	43eb      	mvns	r3, r5
 8004670:	17db      	asrs	r3, r3, #31
 8004672:	401d      	ands	r5, r3
 8004674:	68a3      	ldr	r3, [r4, #8]
 8004676:	6922      	ldr	r2, [r4, #16]
 8004678:	4293      	cmp	r3, r2
 800467a:	dd01      	ble.n	8004680 <_printf_common+0x80>
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	18ed      	adds	r5, r5, r3
 8004680:	2600      	movs	r6, #0
 8004682:	42b5      	cmp	r5, r6
 8004684:	d120      	bne.n	80046c8 <_printf_common+0xc8>
 8004686:	2000      	movs	r0, #0
 8004688:	e010      	b.n	80046ac <_printf_common+0xac>
 800468a:	3501      	adds	r5, #1
 800468c:	68e3      	ldr	r3, [r4, #12]
 800468e:	6832      	ldr	r2, [r6, #0]
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	42ab      	cmp	r3, r5
 8004694:	ddd2      	ble.n	800463c <_printf_common+0x3c>
 8004696:	0022      	movs	r2, r4
 8004698:	2301      	movs	r3, #1
 800469a:	9901      	ldr	r1, [sp, #4]
 800469c:	9800      	ldr	r0, [sp, #0]
 800469e:	9f08      	ldr	r7, [sp, #32]
 80046a0:	3219      	adds	r2, #25
 80046a2:	47b8      	blx	r7
 80046a4:	3001      	adds	r0, #1
 80046a6:	d1f0      	bne.n	800468a <_printf_common+0x8a>
 80046a8:	2001      	movs	r0, #1
 80046aa:	4240      	negs	r0, r0
 80046ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046ae:	2030      	movs	r0, #48	@ 0x30
 80046b0:	18e1      	adds	r1, r4, r3
 80046b2:	3143      	adds	r1, #67	@ 0x43
 80046b4:	7008      	strb	r0, [r1, #0]
 80046b6:	0021      	movs	r1, r4
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	3145      	adds	r1, #69	@ 0x45
 80046bc:	7809      	ldrb	r1, [r1, #0]
 80046be:	18a2      	adds	r2, r4, r2
 80046c0:	3243      	adds	r2, #67	@ 0x43
 80046c2:	3302      	adds	r3, #2
 80046c4:	7011      	strb	r1, [r2, #0]
 80046c6:	e7c1      	b.n	800464c <_printf_common+0x4c>
 80046c8:	0022      	movs	r2, r4
 80046ca:	2301      	movs	r3, #1
 80046cc:	9901      	ldr	r1, [sp, #4]
 80046ce:	9800      	ldr	r0, [sp, #0]
 80046d0:	9f08      	ldr	r7, [sp, #32]
 80046d2:	321a      	adds	r2, #26
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	d0e6      	beq.n	80046a8 <_printf_common+0xa8>
 80046da:	3601      	adds	r6, #1
 80046dc:	e7d1      	b.n	8004682 <_printf_common+0x82>
	...

080046e0 <_printf_i>:
 80046e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e2:	b08b      	sub	sp, #44	@ 0x2c
 80046e4:	9206      	str	r2, [sp, #24]
 80046e6:	000a      	movs	r2, r1
 80046e8:	3243      	adds	r2, #67	@ 0x43
 80046ea:	9307      	str	r3, [sp, #28]
 80046ec:	9005      	str	r0, [sp, #20]
 80046ee:	9203      	str	r2, [sp, #12]
 80046f0:	7e0a      	ldrb	r2, [r1, #24]
 80046f2:	000c      	movs	r4, r1
 80046f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80046f6:	2a78      	cmp	r2, #120	@ 0x78
 80046f8:	d809      	bhi.n	800470e <_printf_i+0x2e>
 80046fa:	2a62      	cmp	r2, #98	@ 0x62
 80046fc:	d80b      	bhi.n	8004716 <_printf_i+0x36>
 80046fe:	2a00      	cmp	r2, #0
 8004700:	d100      	bne.n	8004704 <_printf_i+0x24>
 8004702:	e0bc      	b.n	800487e <_printf_i+0x19e>
 8004704:	497b      	ldr	r1, [pc, #492]	@ (80048f4 <_printf_i+0x214>)
 8004706:	9104      	str	r1, [sp, #16]
 8004708:	2a58      	cmp	r2, #88	@ 0x58
 800470a:	d100      	bne.n	800470e <_printf_i+0x2e>
 800470c:	e090      	b.n	8004830 <_printf_i+0x150>
 800470e:	0025      	movs	r5, r4
 8004710:	3542      	adds	r5, #66	@ 0x42
 8004712:	702a      	strb	r2, [r5, #0]
 8004714:	e022      	b.n	800475c <_printf_i+0x7c>
 8004716:	0010      	movs	r0, r2
 8004718:	3863      	subs	r0, #99	@ 0x63
 800471a:	2815      	cmp	r0, #21
 800471c:	d8f7      	bhi.n	800470e <_printf_i+0x2e>
 800471e:	f7fb fcf3 	bl	8000108 <__gnu_thumb1_case_shi>
 8004722:	0016      	.short	0x0016
 8004724:	fff6001f 	.word	0xfff6001f
 8004728:	fff6fff6 	.word	0xfff6fff6
 800472c:	001ffff6 	.word	0x001ffff6
 8004730:	fff6fff6 	.word	0xfff6fff6
 8004734:	fff6fff6 	.word	0xfff6fff6
 8004738:	003600a1 	.word	0x003600a1
 800473c:	fff60080 	.word	0xfff60080
 8004740:	00b2fff6 	.word	0x00b2fff6
 8004744:	0036fff6 	.word	0x0036fff6
 8004748:	fff6fff6 	.word	0xfff6fff6
 800474c:	0084      	.short	0x0084
 800474e:	0025      	movs	r5, r4
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	3542      	adds	r5, #66	@ 0x42
 8004754:	1d11      	adds	r1, r2, #4
 8004756:	6019      	str	r1, [r3, #0]
 8004758:	6813      	ldr	r3, [r2, #0]
 800475a:	702b      	strb	r3, [r5, #0]
 800475c:	2301      	movs	r3, #1
 800475e:	e0a0      	b.n	80048a2 <_printf_i+0x1c2>
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	6809      	ldr	r1, [r1, #0]
 8004764:	1d02      	adds	r2, r0, #4
 8004766:	060d      	lsls	r5, r1, #24
 8004768:	d50b      	bpl.n	8004782 <_printf_i+0xa2>
 800476a:	6806      	ldr	r6, [r0, #0]
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	2e00      	cmp	r6, #0
 8004770:	da03      	bge.n	800477a <_printf_i+0x9a>
 8004772:	232d      	movs	r3, #45	@ 0x2d
 8004774:	9a03      	ldr	r2, [sp, #12]
 8004776:	4276      	negs	r6, r6
 8004778:	7013      	strb	r3, [r2, #0]
 800477a:	4b5e      	ldr	r3, [pc, #376]	@ (80048f4 <_printf_i+0x214>)
 800477c:	270a      	movs	r7, #10
 800477e:	9304      	str	r3, [sp, #16]
 8004780:	e018      	b.n	80047b4 <_printf_i+0xd4>
 8004782:	6806      	ldr	r6, [r0, #0]
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	0649      	lsls	r1, r1, #25
 8004788:	d5f1      	bpl.n	800476e <_printf_i+0x8e>
 800478a:	b236      	sxth	r6, r6
 800478c:	e7ef      	b.n	800476e <_printf_i+0x8e>
 800478e:	6808      	ldr	r0, [r1, #0]
 8004790:	6819      	ldr	r1, [r3, #0]
 8004792:	c940      	ldmia	r1!, {r6}
 8004794:	0605      	lsls	r5, r0, #24
 8004796:	d402      	bmi.n	800479e <_printf_i+0xbe>
 8004798:	0640      	lsls	r0, r0, #25
 800479a:	d500      	bpl.n	800479e <_printf_i+0xbe>
 800479c:	b2b6      	uxth	r6, r6
 800479e:	6019      	str	r1, [r3, #0]
 80047a0:	4b54      	ldr	r3, [pc, #336]	@ (80048f4 <_printf_i+0x214>)
 80047a2:	270a      	movs	r7, #10
 80047a4:	9304      	str	r3, [sp, #16]
 80047a6:	2a6f      	cmp	r2, #111	@ 0x6f
 80047a8:	d100      	bne.n	80047ac <_printf_i+0xcc>
 80047aa:	3f02      	subs	r7, #2
 80047ac:	0023      	movs	r3, r4
 80047ae:	2200      	movs	r2, #0
 80047b0:	3343      	adds	r3, #67	@ 0x43
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	6863      	ldr	r3, [r4, #4]
 80047b6:	60a3      	str	r3, [r4, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	db03      	blt.n	80047c4 <_printf_i+0xe4>
 80047bc:	2104      	movs	r1, #4
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	438a      	bics	r2, r1
 80047c2:	6022      	str	r2, [r4, #0]
 80047c4:	2e00      	cmp	r6, #0
 80047c6:	d102      	bne.n	80047ce <_printf_i+0xee>
 80047c8:	9d03      	ldr	r5, [sp, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <_printf_i+0x108>
 80047ce:	9d03      	ldr	r5, [sp, #12]
 80047d0:	0030      	movs	r0, r6
 80047d2:	0039      	movs	r1, r7
 80047d4:	f7fb fd28 	bl	8000228 <__aeabi_uidivmod>
 80047d8:	9b04      	ldr	r3, [sp, #16]
 80047da:	3d01      	subs	r5, #1
 80047dc:	5c5b      	ldrb	r3, [r3, r1]
 80047de:	702b      	strb	r3, [r5, #0]
 80047e0:	0033      	movs	r3, r6
 80047e2:	0006      	movs	r6, r0
 80047e4:	429f      	cmp	r7, r3
 80047e6:	d9f3      	bls.n	80047d0 <_printf_i+0xf0>
 80047e8:	2f08      	cmp	r7, #8
 80047ea:	d109      	bne.n	8004800 <_printf_i+0x120>
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	07db      	lsls	r3, r3, #31
 80047f0:	d506      	bpl.n	8004800 <_printf_i+0x120>
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	dc02      	bgt.n	8004800 <_printf_i+0x120>
 80047fa:	2330      	movs	r3, #48	@ 0x30
 80047fc:	3d01      	subs	r5, #1
 80047fe:	702b      	strb	r3, [r5, #0]
 8004800:	9b03      	ldr	r3, [sp, #12]
 8004802:	1b5b      	subs	r3, r3, r5
 8004804:	6123      	str	r3, [r4, #16]
 8004806:	9b07      	ldr	r3, [sp, #28]
 8004808:	0021      	movs	r1, r4
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	9805      	ldr	r0, [sp, #20]
 800480e:	9b06      	ldr	r3, [sp, #24]
 8004810:	aa09      	add	r2, sp, #36	@ 0x24
 8004812:	f7ff fef5 	bl	8004600 <_printf_common>
 8004816:	3001      	adds	r0, #1
 8004818:	d148      	bne.n	80048ac <_printf_i+0x1cc>
 800481a:	2001      	movs	r0, #1
 800481c:	4240      	negs	r0, r0
 800481e:	b00b      	add	sp, #44	@ 0x2c
 8004820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004822:	2220      	movs	r2, #32
 8004824:	6809      	ldr	r1, [r1, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	6022      	str	r2, [r4, #0]
 800482a:	2278      	movs	r2, #120	@ 0x78
 800482c:	4932      	ldr	r1, [pc, #200]	@ (80048f8 <_printf_i+0x218>)
 800482e:	9104      	str	r1, [sp, #16]
 8004830:	0021      	movs	r1, r4
 8004832:	3145      	adds	r1, #69	@ 0x45
 8004834:	700a      	strb	r2, [r1, #0]
 8004836:	6819      	ldr	r1, [r3, #0]
 8004838:	6822      	ldr	r2, [r4, #0]
 800483a:	c940      	ldmia	r1!, {r6}
 800483c:	0610      	lsls	r0, r2, #24
 800483e:	d402      	bmi.n	8004846 <_printf_i+0x166>
 8004840:	0650      	lsls	r0, r2, #25
 8004842:	d500      	bpl.n	8004846 <_printf_i+0x166>
 8004844:	b2b6      	uxth	r6, r6
 8004846:	6019      	str	r1, [r3, #0]
 8004848:	07d3      	lsls	r3, r2, #31
 800484a:	d502      	bpl.n	8004852 <_printf_i+0x172>
 800484c:	2320      	movs	r3, #32
 800484e:	4313      	orrs	r3, r2
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	2e00      	cmp	r6, #0
 8004854:	d001      	beq.n	800485a <_printf_i+0x17a>
 8004856:	2710      	movs	r7, #16
 8004858:	e7a8      	b.n	80047ac <_printf_i+0xcc>
 800485a:	2220      	movs	r2, #32
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	4393      	bics	r3, r2
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	e7f8      	b.n	8004856 <_printf_i+0x176>
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	680d      	ldr	r5, [r1, #0]
 8004868:	1d10      	adds	r0, r2, #4
 800486a:	6949      	ldr	r1, [r1, #20]
 800486c:	6018      	str	r0, [r3, #0]
 800486e:	6813      	ldr	r3, [r2, #0]
 8004870:	062e      	lsls	r6, r5, #24
 8004872:	d501      	bpl.n	8004878 <_printf_i+0x198>
 8004874:	6019      	str	r1, [r3, #0]
 8004876:	e002      	b.n	800487e <_printf_i+0x19e>
 8004878:	066d      	lsls	r5, r5, #25
 800487a:	d5fb      	bpl.n	8004874 <_printf_i+0x194>
 800487c:	8019      	strh	r1, [r3, #0]
 800487e:	2300      	movs	r3, #0
 8004880:	9d03      	ldr	r5, [sp, #12]
 8004882:	6123      	str	r3, [r4, #16]
 8004884:	e7bf      	b.n	8004806 <_printf_i+0x126>
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	1d11      	adds	r1, r2, #4
 800488a:	6019      	str	r1, [r3, #0]
 800488c:	6815      	ldr	r5, [r2, #0]
 800488e:	2100      	movs	r1, #0
 8004890:	0028      	movs	r0, r5
 8004892:	6862      	ldr	r2, [r4, #4]
 8004894:	f000 f91c 	bl	8004ad0 <memchr>
 8004898:	2800      	cmp	r0, #0
 800489a:	d001      	beq.n	80048a0 <_printf_i+0x1c0>
 800489c:	1b40      	subs	r0, r0, r5
 800489e:	6060      	str	r0, [r4, #4]
 80048a0:	6863      	ldr	r3, [r4, #4]
 80048a2:	6123      	str	r3, [r4, #16]
 80048a4:	2300      	movs	r3, #0
 80048a6:	9a03      	ldr	r2, [sp, #12]
 80048a8:	7013      	strb	r3, [r2, #0]
 80048aa:	e7ac      	b.n	8004806 <_printf_i+0x126>
 80048ac:	002a      	movs	r2, r5
 80048ae:	6923      	ldr	r3, [r4, #16]
 80048b0:	9906      	ldr	r1, [sp, #24]
 80048b2:	9805      	ldr	r0, [sp, #20]
 80048b4:	9d07      	ldr	r5, [sp, #28]
 80048b6:	47a8      	blx	r5
 80048b8:	3001      	adds	r0, #1
 80048ba:	d0ae      	beq.n	800481a <_printf_i+0x13a>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	079b      	lsls	r3, r3, #30
 80048c0:	d415      	bmi.n	80048ee <_printf_i+0x20e>
 80048c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048c4:	68e0      	ldr	r0, [r4, #12]
 80048c6:	4298      	cmp	r0, r3
 80048c8:	daa9      	bge.n	800481e <_printf_i+0x13e>
 80048ca:	0018      	movs	r0, r3
 80048cc:	e7a7      	b.n	800481e <_printf_i+0x13e>
 80048ce:	0022      	movs	r2, r4
 80048d0:	2301      	movs	r3, #1
 80048d2:	9906      	ldr	r1, [sp, #24]
 80048d4:	9805      	ldr	r0, [sp, #20]
 80048d6:	9e07      	ldr	r6, [sp, #28]
 80048d8:	3219      	adds	r2, #25
 80048da:	47b0      	blx	r6
 80048dc:	3001      	adds	r0, #1
 80048de:	d09c      	beq.n	800481a <_printf_i+0x13a>
 80048e0:	3501      	adds	r5, #1
 80048e2:	68e3      	ldr	r3, [r4, #12]
 80048e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	42ab      	cmp	r3, r5
 80048ea:	dcf0      	bgt.n	80048ce <_printf_i+0x1ee>
 80048ec:	e7e9      	b.n	80048c2 <_printf_i+0x1e2>
 80048ee:	2500      	movs	r5, #0
 80048f0:	e7f7      	b.n	80048e2 <_printf_i+0x202>
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	08004d14 	.word	0x08004d14
 80048f8:	08004d25 	.word	0x08004d25

080048fc <__swbuf_r>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	0006      	movs	r6, r0
 8004900:	000d      	movs	r5, r1
 8004902:	0014      	movs	r4, r2
 8004904:	2800      	cmp	r0, #0
 8004906:	d004      	beq.n	8004912 <__swbuf_r+0x16>
 8004908:	6a03      	ldr	r3, [r0, #32]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <__swbuf_r+0x16>
 800490e:	f7ff fa31 	bl	8003d74 <__sinit>
 8004912:	69a3      	ldr	r3, [r4, #24]
 8004914:	60a3      	str	r3, [r4, #8]
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	071b      	lsls	r3, r3, #28
 800491a:	d502      	bpl.n	8004922 <__swbuf_r+0x26>
 800491c:	6923      	ldr	r3, [r4, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <__swbuf_r+0x3a>
 8004922:	0021      	movs	r1, r4
 8004924:	0030      	movs	r0, r6
 8004926:	f000 f82b 	bl	8004980 <__swsetup_r>
 800492a:	2800      	cmp	r0, #0
 800492c:	d003      	beq.n	8004936 <__swbuf_r+0x3a>
 800492e:	2501      	movs	r5, #1
 8004930:	426d      	negs	r5, r5
 8004932:	0028      	movs	r0, r5
 8004934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	6820      	ldr	r0, [r4, #0]
 800493a:	b2ef      	uxtb	r7, r5
 800493c:	1ac0      	subs	r0, r0, r3
 800493e:	6963      	ldr	r3, [r4, #20]
 8004940:	b2ed      	uxtb	r5, r5
 8004942:	4283      	cmp	r3, r0
 8004944:	dc05      	bgt.n	8004952 <__swbuf_r+0x56>
 8004946:	0021      	movs	r1, r4
 8004948:	0030      	movs	r0, r6
 800494a:	f7ff fcc1 	bl	80042d0 <_fflush_r>
 800494e:	2800      	cmp	r0, #0
 8004950:	d1ed      	bne.n	800492e <__swbuf_r+0x32>
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	3001      	adds	r0, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	60a3      	str	r3, [r4, #8]
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	6022      	str	r2, [r4, #0]
 8004960:	701f      	strb	r7, [r3, #0]
 8004962:	6963      	ldr	r3, [r4, #20]
 8004964:	4283      	cmp	r3, r0
 8004966:	d004      	beq.n	8004972 <__swbuf_r+0x76>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	07db      	lsls	r3, r3, #31
 800496c:	d5e1      	bpl.n	8004932 <__swbuf_r+0x36>
 800496e:	2d0a      	cmp	r5, #10
 8004970:	d1df      	bne.n	8004932 <__swbuf_r+0x36>
 8004972:	0021      	movs	r1, r4
 8004974:	0030      	movs	r0, r6
 8004976:	f7ff fcab 	bl	80042d0 <_fflush_r>
 800497a:	2800      	cmp	r0, #0
 800497c:	d0d9      	beq.n	8004932 <__swbuf_r+0x36>
 800497e:	e7d6      	b.n	800492e <__swbuf_r+0x32>

08004980 <__swsetup_r>:
 8004980:	4b2d      	ldr	r3, [pc, #180]	@ (8004a38 <__swsetup_r+0xb8>)
 8004982:	b570      	push	{r4, r5, r6, lr}
 8004984:	0005      	movs	r5, r0
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	000c      	movs	r4, r1
 800498a:	2800      	cmp	r0, #0
 800498c:	d004      	beq.n	8004998 <__swsetup_r+0x18>
 800498e:	6a03      	ldr	r3, [r0, #32]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <__swsetup_r+0x18>
 8004994:	f7ff f9ee 	bl	8003d74 <__sinit>
 8004998:	230c      	movs	r3, #12
 800499a:	5ee2      	ldrsh	r2, [r4, r3]
 800499c:	0713      	lsls	r3, r2, #28
 800499e:	d423      	bmi.n	80049e8 <__swsetup_r+0x68>
 80049a0:	06d3      	lsls	r3, r2, #27
 80049a2:	d407      	bmi.n	80049b4 <__swsetup_r+0x34>
 80049a4:	2309      	movs	r3, #9
 80049a6:	602b      	str	r3, [r5, #0]
 80049a8:	2340      	movs	r3, #64	@ 0x40
 80049aa:	2001      	movs	r0, #1
 80049ac:	4313      	orrs	r3, r2
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	4240      	negs	r0, r0
 80049b2:	e03a      	b.n	8004a2a <__swsetup_r+0xaa>
 80049b4:	0752      	lsls	r2, r2, #29
 80049b6:	d513      	bpl.n	80049e0 <__swsetup_r+0x60>
 80049b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049ba:	2900      	cmp	r1, #0
 80049bc:	d008      	beq.n	80049d0 <__swsetup_r+0x50>
 80049be:	0023      	movs	r3, r4
 80049c0:	3344      	adds	r3, #68	@ 0x44
 80049c2:	4299      	cmp	r1, r3
 80049c4:	d002      	beq.n	80049cc <__swsetup_r+0x4c>
 80049c6:	0028      	movs	r0, r5
 80049c8:	f7ff faf6 	bl	8003fb8 <_free_r>
 80049cc:	2300      	movs	r3, #0
 80049ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80049d0:	2224      	movs	r2, #36	@ 0x24
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	4393      	bics	r3, r2
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	2300      	movs	r3, #0
 80049da:	6063      	str	r3, [r4, #4]
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	2308      	movs	r3, #8
 80049e2:	89a2      	ldrh	r2, [r4, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <__swsetup_r+0x86>
 80049ee:	21a0      	movs	r1, #160	@ 0xa0
 80049f0:	2280      	movs	r2, #128	@ 0x80
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	0089      	lsls	r1, r1, #2
 80049f6:	0092      	lsls	r2, r2, #2
 80049f8:	400b      	ands	r3, r1
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <__swsetup_r+0x86>
 80049fe:	0021      	movs	r1, r4
 8004a00:	0028      	movs	r0, r5
 8004a02:	f000 f89b 	bl	8004b3c <__smakebuf_r>
 8004a06:	230c      	movs	r3, #12
 8004a08:	5ee2      	ldrsh	r2, [r4, r3]
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	0013      	movs	r3, r2
 8004a0e:	400b      	ands	r3, r1
 8004a10:	420a      	tst	r2, r1
 8004a12:	d00b      	beq.n	8004a2c <__swsetup_r+0xac>
 8004a14:	2300      	movs	r3, #0
 8004a16:	60a3      	str	r3, [r4, #8]
 8004a18:	6963      	ldr	r3, [r4, #20]
 8004a1a:	425b      	negs	r3, r3
 8004a1c:	61a3      	str	r3, [r4, #24]
 8004a1e:	2000      	movs	r0, #0
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	4283      	cmp	r3, r0
 8004a24:	d101      	bne.n	8004a2a <__swsetup_r+0xaa>
 8004a26:	0613      	lsls	r3, r2, #24
 8004a28:	d4be      	bmi.n	80049a8 <__swsetup_r+0x28>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	0791      	lsls	r1, r2, #30
 8004a2e:	d400      	bmi.n	8004a32 <__swsetup_r+0xb2>
 8004a30:	6963      	ldr	r3, [r4, #20]
 8004a32:	60a3      	str	r3, [r4, #8]
 8004a34:	e7f3      	b.n	8004a1e <__swsetup_r+0x9e>
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	2000001c 	.word	0x2000001c

08004a3c <_raise_r>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	0004      	movs	r4, r0
 8004a40:	000d      	movs	r5, r1
 8004a42:	291f      	cmp	r1, #31
 8004a44:	d904      	bls.n	8004a50 <_raise_r+0x14>
 8004a46:	2316      	movs	r3, #22
 8004a48:	6003      	str	r3, [r0, #0]
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	4240      	negs	r0, r0
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <_raise_r+0x24>
 8004a56:	008a      	lsls	r2, r1, #2
 8004a58:	189b      	adds	r3, r3, r2
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	2a00      	cmp	r2, #0
 8004a5e:	d108      	bne.n	8004a72 <_raise_r+0x36>
 8004a60:	0020      	movs	r0, r4
 8004a62:	f000 f831 	bl	8004ac8 <_getpid_r>
 8004a66:	002a      	movs	r2, r5
 8004a68:	0001      	movs	r1, r0
 8004a6a:	0020      	movs	r0, r4
 8004a6c:	f000 f81a 	bl	8004aa4 <_kill_r>
 8004a70:	e7ed      	b.n	8004a4e <_raise_r+0x12>
 8004a72:	2a01      	cmp	r2, #1
 8004a74:	d009      	beq.n	8004a8a <_raise_r+0x4e>
 8004a76:	1c51      	adds	r1, r2, #1
 8004a78:	d103      	bne.n	8004a82 <_raise_r+0x46>
 8004a7a:	2316      	movs	r3, #22
 8004a7c:	6003      	str	r3, [r0, #0]
 8004a7e:	2001      	movs	r0, #1
 8004a80:	e7e5      	b.n	8004a4e <_raise_r+0x12>
 8004a82:	2100      	movs	r1, #0
 8004a84:	0028      	movs	r0, r5
 8004a86:	6019      	str	r1, [r3, #0]
 8004a88:	4790      	blx	r2
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e7df      	b.n	8004a4e <_raise_r+0x12>
	...

08004a90 <raise>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	4b03      	ldr	r3, [pc, #12]	@ (8004aa0 <raise+0x10>)
 8004a94:	0001      	movs	r1, r0
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	f7ff ffd0 	bl	8004a3c <_raise_r>
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	46c0      	nop			@ (mov r8, r8)
 8004aa0:	2000001c 	.word	0x2000001c

08004aa4 <_kill_r>:
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	b570      	push	{r4, r5, r6, lr}
 8004aa8:	4d06      	ldr	r5, [pc, #24]	@ (8004ac4 <_kill_r+0x20>)
 8004aaa:	0004      	movs	r4, r0
 8004aac:	0008      	movs	r0, r1
 8004aae:	0011      	movs	r1, r2
 8004ab0:	602b      	str	r3, [r5, #0]
 8004ab2:	f7fc f8f7 	bl	8000ca4 <_kill>
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	d103      	bne.n	8004ac2 <_kill_r+0x1e>
 8004aba:	682b      	ldr	r3, [r5, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d000      	beq.n	8004ac2 <_kill_r+0x1e>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	2000035c 	.word	0x2000035c

08004ac8 <_getpid_r>:
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	f7fc f8e5 	bl	8000c98 <_getpid>
 8004ace:	bd10      	pop	{r4, pc}

08004ad0 <memchr>:
 8004ad0:	b2c9      	uxtb	r1, r1
 8004ad2:	1882      	adds	r2, r0, r2
 8004ad4:	4290      	cmp	r0, r2
 8004ad6:	d101      	bne.n	8004adc <memchr+0xc>
 8004ad8:	2000      	movs	r0, #0
 8004ada:	4770      	bx	lr
 8004adc:	7803      	ldrb	r3, [r0, #0]
 8004ade:	428b      	cmp	r3, r1
 8004ae0:	d0fb      	beq.n	8004ada <memchr+0xa>
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	e7f6      	b.n	8004ad4 <memchr+0x4>
	...

08004ae8 <__swhatbuf_r>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	000e      	movs	r6, r1
 8004aec:	001d      	movs	r5, r3
 8004aee:	230e      	movs	r3, #14
 8004af0:	5ec9      	ldrsh	r1, [r1, r3]
 8004af2:	0014      	movs	r4, r2
 8004af4:	b096      	sub	sp, #88	@ 0x58
 8004af6:	2900      	cmp	r1, #0
 8004af8:	da0c      	bge.n	8004b14 <__swhatbuf_r+0x2c>
 8004afa:	89b2      	ldrh	r2, [r6, #12]
 8004afc:	2380      	movs	r3, #128	@ 0x80
 8004afe:	0011      	movs	r1, r2
 8004b00:	4019      	ands	r1, r3
 8004b02:	421a      	tst	r2, r3
 8004b04:	d114      	bne.n	8004b30 <__swhatbuf_r+0x48>
 8004b06:	2380      	movs	r3, #128	@ 0x80
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	6029      	str	r1, [r5, #0]
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	b016      	add	sp, #88	@ 0x58
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	466a      	mov	r2, sp
 8004b16:	f000 f853 	bl	8004bc0 <_fstat_r>
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	dbed      	blt.n	8004afa <__swhatbuf_r+0x12>
 8004b1e:	23f0      	movs	r3, #240	@ 0xf0
 8004b20:	9901      	ldr	r1, [sp, #4]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	4019      	ands	r1, r3
 8004b26:	4b04      	ldr	r3, [pc, #16]	@ (8004b38 <__swhatbuf_r+0x50>)
 8004b28:	18c9      	adds	r1, r1, r3
 8004b2a:	424b      	negs	r3, r1
 8004b2c:	4159      	adcs	r1, r3
 8004b2e:	e7ea      	b.n	8004b06 <__swhatbuf_r+0x1e>
 8004b30:	2100      	movs	r1, #0
 8004b32:	2340      	movs	r3, #64	@ 0x40
 8004b34:	e7e9      	b.n	8004b0a <__swhatbuf_r+0x22>
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	ffffe000 	.word	0xffffe000

08004b3c <__smakebuf_r>:
 8004b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b3e:	2602      	movs	r6, #2
 8004b40:	898b      	ldrh	r3, [r1, #12]
 8004b42:	0005      	movs	r5, r0
 8004b44:	000c      	movs	r4, r1
 8004b46:	b085      	sub	sp, #20
 8004b48:	4233      	tst	r3, r6
 8004b4a:	d007      	beq.n	8004b5c <__smakebuf_r+0x20>
 8004b4c:	0023      	movs	r3, r4
 8004b4e:	3347      	adds	r3, #71	@ 0x47
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	6123      	str	r3, [r4, #16]
 8004b54:	2301      	movs	r3, #1
 8004b56:	6163      	str	r3, [r4, #20]
 8004b58:	b005      	add	sp, #20
 8004b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b5c:	ab03      	add	r3, sp, #12
 8004b5e:	aa02      	add	r2, sp, #8
 8004b60:	f7ff ffc2 	bl	8004ae8 <__swhatbuf_r>
 8004b64:	9f02      	ldr	r7, [sp, #8]
 8004b66:	9001      	str	r0, [sp, #4]
 8004b68:	0039      	movs	r1, r7
 8004b6a:	0028      	movs	r0, r5
 8004b6c:	f7ff fa9a 	bl	80040a4 <_malloc_r>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d108      	bne.n	8004b86 <__smakebuf_r+0x4a>
 8004b74:	220c      	movs	r2, #12
 8004b76:	5ea3      	ldrsh	r3, [r4, r2]
 8004b78:	059a      	lsls	r2, r3, #22
 8004b7a:	d4ed      	bmi.n	8004b58 <__smakebuf_r+0x1c>
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	4393      	bics	r3, r2
 8004b80:	431e      	orrs	r6, r3
 8004b82:	81a6      	strh	r6, [r4, #12]
 8004b84:	e7e2      	b.n	8004b4c <__smakebuf_r+0x10>
 8004b86:	2380      	movs	r3, #128	@ 0x80
 8004b88:	89a2      	ldrh	r2, [r4, #12]
 8004b8a:	6020      	str	r0, [r4, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	9b03      	ldr	r3, [sp, #12]
 8004b92:	6120      	str	r0, [r4, #16]
 8004b94:	6167      	str	r7, [r4, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <__smakebuf_r+0x78>
 8004b9a:	0028      	movs	r0, r5
 8004b9c:	230e      	movs	r3, #14
 8004b9e:	5ee1      	ldrsh	r1, [r4, r3]
 8004ba0:	f000 f820 	bl	8004be4 <_isatty_r>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d005      	beq.n	8004bb4 <__smakebuf_r+0x78>
 8004ba8:	2303      	movs	r3, #3
 8004baa:	89a2      	ldrh	r2, [r4, #12]
 8004bac:	439a      	bics	r2, r3
 8004bae:	3b02      	subs	r3, #2
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	81a3      	strh	r3, [r4, #12]
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	9a01      	ldr	r2, [sp, #4]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	81a3      	strh	r3, [r4, #12]
 8004bbc:	e7cc      	b.n	8004b58 <__smakebuf_r+0x1c>
	...

08004bc0 <_fstat_r>:
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	b570      	push	{r4, r5, r6, lr}
 8004bc4:	4d06      	ldr	r5, [pc, #24]	@ (8004be0 <_fstat_r+0x20>)
 8004bc6:	0004      	movs	r4, r0
 8004bc8:	0008      	movs	r0, r1
 8004bca:	0011      	movs	r1, r2
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	f7fc f8c9 	bl	8000d64 <_fstat>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	d103      	bne.n	8004bde <_fstat_r+0x1e>
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d000      	beq.n	8004bde <_fstat_r+0x1e>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	2000035c 	.word	0x2000035c

08004be4 <_isatty_r>:
 8004be4:	2300      	movs	r3, #0
 8004be6:	b570      	push	{r4, r5, r6, lr}
 8004be8:	4d06      	ldr	r5, [pc, #24]	@ (8004c04 <_isatty_r+0x20>)
 8004bea:	0004      	movs	r4, r0
 8004bec:	0008      	movs	r0, r1
 8004bee:	602b      	str	r3, [r5, #0]
 8004bf0:	f7fc f8c6 	bl	8000d80 <_isatty>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d103      	bne.n	8004c00 <_isatty_r+0x1c>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d000      	beq.n	8004c00 <_isatty_r+0x1c>
 8004bfe:	6023      	str	r3, [r4, #0]
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
 8004c02:	46c0      	nop			@ (mov r8, r8)
 8004c04:	2000035c 	.word	0x2000035c

08004c08 <_init>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr

08004c14 <_fini>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr
